#!/usr/bin/env bash

# Version= 0.3.51

# TODO: Improvements in the script
# -> Global System init support
# -> autologin in Devuan
# In OpenSuse there is no android-tools lf trash-cli light by default
# In OpenBSD install qutebrowser separatily

# TODO: Before running this script you must install:
# Debian -> curl
# Fedora -> audit
# NIXOS -> git, stow
# VOID -> opendoas, curl (remove sudo)
# FreeBSD -> doas, curl bash >>>>>>>> "permit nopass keepenv" to doas.conf
# OpenBSD ->  curl bash
# Alpine -> curl, lsblk, make
# $PULSEAUDIOUTILS not installed by default problem with missing 64bit support

exec &> >(tee -a "install.log") 2>install.error

USERNAME="$USER"
LVM_PASSWORD=""
GIT_USERNAME="${USERNAME}panzer"
GIT_EMAIL="$GIT_USERNAME"
DOTFILES="https://gitea.com/sorathpanzer/dotgit.git"

CONFIGURE_PACKAGES()
{
RELEASE=$(cat /etc/os-release | grep ^NAME= | cut -d '=' -f2 | awk '{print $1}' | tr -d '"')
UPPERCASE=$(echo $RELEASE | tr '[:lower:]' '[:upper:]')

  NA=" "
# DISTRO=(        Debian/Ubuntu/Devuan        Fedora                      Alma/Rocky/Centos           Arch                  Void                Alpine              OpenSuse                    FreeBSD             OpenBSD                 )
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ )
  ADBLOCK=(       "$NA"                       "$NA"                       "$NA"                       "$NA"                 python3-adblock     "$NA"               "$NA"                       py39-adblock        py3-adblock             )
  ANDROIDTOOLS=(  android-tools-adb           android-tools               "$NA"                       android-tools         android-tools       android-tools       "$NA"                       android-tools       "$NA"                   )
  BTRFSPROGS=(    btrfs-progs                 btrfs-progs                 "$NA"                       btrfs-progs           btrfs-progs         btrfs-progs         btrfsprogs                  "$NA"               "$NA"                   )
  CRONTABS=(      python3-crontab             crontabs                    crontabs                    "$NA"                 "$NA"               "$NA"               python3-crontab             py39-python-crontab "$NA"                   )
  DBUSX11=(       dbus-x11                    dbus-x11                    dbus-x11                    dbus                  dbus-x11            dbus-x11            dbus-1-x11                  dbus                dbus                    )
  DOAS=(          doas                        opendoas                    "$NA"                       opendoas              opendoas            doas                opendoas                    doas                "$NA"                   )
  DUNST=(         dunst                       dunst                       "$NA"                       dunst                 dunst               dunst               dunst                       dunst               dunst                   )
  FEH=(           feh                         feh                         "$NA"                       feh                   feh                 feh                 feh                         feh                 feh                     )
  FFTHUMBNAILER=( ffmpegthumbnailer           ffmpegthumbnailer           "$NA"                       ffmpegthumbnailer     ffmpegthumbnailer   ffmpegthumbnailer   ffmpegthumbnailer           ffmpegthumbnailer   ffmpegthumbnailer       )
  FIREFOX=(       "$NA"                       firefox                     firefox                     firefox               firefox             firefox             firefox                     firefox-esr         firefox-esr             )
  FLATPAK=(       "$NA"                       flatpak                     "$NA"                       "$NA"                 "$NA"               "$NA"               "$NA"                       "$NA"               "$NA"                   )
  FZF=(           fzf                         fzf                         "$NA"                       fzf                   fzf                 fzf                 fzf                         fzf                 fzf                     )
  GCC=(           gcc                         gcc                         gcc                         gcc                   gcc                 gcc                 gcc                         gcc                 gcc%11                  )
  GIFLIB=(        libgif-dev                  giflib-devel                giflib-devel                giflib                giflib-devel        giflib-dev          giflib-devel                giflib              giflib                  )
  GRUBBY=(        "$NA"                       grubby                      grubby                      "$NA"                 "$NA"               "$NA"               grubby                      "$NA"               "$NA"                   )
  IMAGEMAGICK=(   imagemagick                 ImageMagick                 ImageMagick                 imagemagick           ImageMagick         imagemagick         ImageMagick                 ImageMagick7-nox11  ImageMagick             )
  IMLIB2=(        libimlib2-dev               imlib2-devel                imlib2-devel                imlib2                imlib2-devel        imlib2-dev          "$NA"                       imlib2              imlib2                  )
  KEEPASSXC=(     keepassxc                   keepassxc                   keepassxc                   keepassxc             keepassxc           keepassxc           keepassxc                   keepassxc           keepassxc--             )
  LF=(            "$NA"                       "$NA"                       "$NA"                       lf                    lf                  "$NA"               "$NA"                       lf                  lf                      )
  LIBEXIF=(       libexif-dev                 libexif-devel               libexif-devel               libexif               libexif-devel       libexif-dev         libexif-devel               libexif             libexif                 )
  LIBREOFFICE=(   libreoffice-calc            libreoffice-calc            libreoffice-calc            libreoffice-still     libreoffice-calc    libreoffice-calc    libreoffice-calc            libreoffice         libreoffice             )
  LIBREOFFPT=(    libreoffice-l10n-pt         libreoffice-langpack-pt-PT  libreoffice-langpack-pt-PT  libreoffice-still-pt  libreoffice-i18n-pt libreoffice-lang-pt libreoffice-l10n-pt         pt-libreoffice      libreoffice-i18n-pt-br  )
  LIBX11=(        libx11-dev                  libX11-devel                libX11-devel                libx11                libX11-devel        libx11-dev          libX11-devel                libX11              "$NA"                   )
  LIBXFT=(        libxft-dev                  libXft-devel                libXft-devel                libxft                libXft-devel        libxft-dev          libXft-devel                libXft              "$NA"                   )
  LIBXINERAMA=(   libxinerama-dev             libXinerama-devel           libXinerama-devel           libxinerama           libXinerama-devel   libxinerama-dev     libXinerama-devel           libXinerama         "$NA"                   )
  LIGHT=(         light                       light                       "$NA"                       light                 light               light               "$NA"                       "$NA"               "$NA"                   )
  LMSENSORS=(     lm-sensors                  lm_sensors                  lm_sensors                  lm_sensors            lm_sensors          lm-sensors          sensors                     "$NA"               "$NA"                   )
  NTFS3G=(        ntfs-3g                     ntfs-3g                     ntfs-3g                     ntfs-3g               ntfs-3g             ntfs-3g             ntfs-3g                     fusefs-ntfs         ntfs_3g                 )
  PANDOCPDF=(     pandoc                      pandoc-pdf                  "$NA"                       pandoc                pandoc              "$NA"               pandoc                      "$NA"               pandoc                  )
  PAUTILS=(       pulseaudio-utils            pulseaudio-utils            pulseaudio-utils            pulseaudio            pulseaudio-utils    pulseaudio-utils    pulseaudio-utils            "$NA"               pulseaudio              )
  PICOM=(         picom                       picom                       "$NA"                       picom                 picom               picom               picom                       picom               picom                   )
  PIPEWIRE=(      pipewire                    pipewire                    pipewire                    pipewire              pipewire            pipewire            pipewire                    pipewire            "$NA"                   )
  POPPLERUTILS=(  poppler-utils               poppler-utils               poppler                     poppler               poppler-utils       poppler-utils       poppler-tools               poppler-utils       poppler-utils           )
  PYTHON=(        "$NA"                       python3-devel               python3-devel               "$NA"                 python3-devel       python3-dev         python3-devel               python311           python3                 )
  PYTHON3PIP=(    python3-pip                 python3-pip                 python-pip                  python-pip            python3-pip         py3-pip             python3-pip                 py39-pip            py3-pip                 )
  PYTHON3SIX=(    python3-six                 python3-six                 python-six                  python-six            python3-six         py3-six             python3-six                 py39-six            py3-six                 )
  QEMU=(          qemu                        qemu                        qemu-img                    qemu-base             qemu                qemu                qemu                        qemu                qemu                    )
  RSYNC=(         rsync                       rsync                       rsync                       rsync                 rsync               rsync               rsync                       rsync               rsync--                 )
  SCROT=(         scrot                       scrot                       "$NA"                       scrot                 scrot               scrot               scrot                       scrot               scrot                   )
  SOX=(           sox                         sox                         "$NA"                       sox                   sox                 sox                 sox                         sox                 sox                     )
  STOW=(          stow                        stow                        "$NA"                       stow                  stow                stow                stow                        stow                stow                    )
  TELEGRAM=(      telegram-desktop            telegram-desktop            "$NA"                       telegram-desktop      telegram-desktop    telegram-desktop    telegram-desktop            telegram-desktop    "$NA"                   )
  TIG=(           tig                         tig                         tig                         tig                   tig                 tig                 "$NA"                       tig                 tig                     )
  TRASHCLI=(      trash-cli                   trash-cli                   "$NA"                       trash-cli             trash-cli           trash-cli           "$NA"                       "$NA"               "$NA"                   )
  UEBERZUG=(      "$NA"                       "$NA"                       "$NA"                       "$NA"                 ueberzug            "$NA"               "$NA"                       py39-ueberzug       "$NA"                   )
  UDISKIE=(       udiskie                     udiskie                     "$NA"                       udiskie               udiskie             udiskie             udiskie                     "$NA"               "$NA"                   )
  UNZIP=(         unzip                       unzip                       unzip                       unzip                 unzip               unzip               unzip                       unzip               unzip--                 )
  W3M=(           w3m                         w3m                         w3m                         w3m                   w3m                 w3m                 w3m                         w3m                 w3m--                   )
  XDOTOOL=(       xdotool                     xdotool                     "$NA"                       xdotool               xdotool             xdotool             xdotool                     xdotool             xdotool                 )
  XF86INTEL=(     xserver-xorg-video-intel    xorg-x11-drv-intel          "$NA"                       xf86-video-intel      xf86-video-intel    xf86-video-intel    xf86-video-intel            xf86-video-intel    "$NA"                   )
  XINIT=(         xinit                       xorg-x11-xinit              xorg-x11-xinit              xorg-xinit            xinit               xinit               xinit                       xinit               "$NA"                   )
  XINPUT=(        xinput                      xinput                      xinput                      xorg-xinput           xinput              xinput              xinput                      xinput              "$NA"                   )
  XORGSERVER=(    xserver-xorg                xorg-x11-server-Xorg        xorg-x11-server-Xorg        xorg-server           xorg-minimal        xorg-server         xorg-x11-server             xorg-minimal        "$NA"                   )
  XRANDR=(        x11-xserver-utils           xrandr                      xrandr                      xorg-xrandr           xrandr              xrandr              xrandr                      xrandr              "$NA"                   )
  XRDB=(          x11-xserver-utils           xrdb                        xrdb                        xorg-xrdb             xrdb                xrdb                xrdb                        xrdb                "$NA"                   )
  XSET=(          x11-xserver-utils           xset                        xset                        xorg-xset             xset                xset                xset                        xset                "$NA"                   )
  YOUTUBEDL=(     youtube-dl                  youtube-dl                  youtube-dl                  youtube-dl            youtube-dl          youtube-dl          youtube-dl                  youtube_dl          youtube-dl              )
  ZATHURA=(       zathura                     zathura                     "$NA"                       zathura               zathura             zathura             zathura                     zathura             zathura                 )
  ZATHURAPDF=(    zathura-pdf-poppler         zathura-pdf-poppler         "$NA"                       zathura-pdf-poppler   zathura-pdf-poppler zathura-pdf-poppler zathura-plugin-pdf-poppler  zathura-pdf-poppler zathura-pdf-poppler     )

  case "${RELEASE}" in
    "")                  echo "$RELEASE is not supported!"; exit 1 ;;
    Debian|Ubuntu|Devuan)	POS="0"
      PKGINSTALL="sudo apt-get -y install" ;;
    Fedora)               POS="1"
      PKGINSTALL="[ -x "$(command -v rpm-ostree)" ]; then && sudo rpm-ostree install || sudo dnf install -y" ;;
    AlmaLinux|Rocky|CentOS)  POS="2"
      PKGINSTALL="sudo dnf install -y" ;;
    Arch)               POS="3"
      PKGINSTALL="sudo pacman --noconfirm -Syu" ;;
    Void)               POS="4"
      PKGINSTALL="doas xbps-install -Sy" ;;
    Alpine)             POS="5"
      PKGINSTALL="doas apk add" ;;
    openSUSE)           POS="6"
      PKGINSTALL="sudo zypper install -y" ;;
    FreeBSD)            POS="7"
      PKGINSTALL="doas pkg install -y" ;;
    OpenBSD)            POS="8"
      PKGINSTALL="doas pkg_add -i" ;;
  esac

  if [ $RELEASE = Void ] || [ $RELEASE = Alpine ]; then
    SUDOAS="doas"
  else
    SUDOAS="sudo"
  fi
}

FEDORA_SETUP()
{
    [ ! -x "$(command -v rpm-ostree)" ] && echo "max_parallel_downloads=10
    deltarpm=True
    defaultyes=True" | sudo tee -a /etc/dnf/dnf.conf

    echo "Defaults:$USERNAME timestamp_timeout=60" | sudo tee /etc/sudoers.d/sorath
    [ -x "$(command -v rpm-ostree)" ] && sudo rpm-ostree override remove zezere-ignition ignition dbus-parsec
    $PKGINSTALL install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
    [ -x "$(command -v rpm-ostree)" ] && sudo rpm-ostree ex apply-live --allow-replacement
    [ -x "$(command -v rpm-ostree)" ] && sudo sed -i 's/none/stage/g' /etc/rpm-ostreed.conf
    sudo sed -i '2s/\/bin\/bash/\/usr\/bin\/zsh/g' /etc/passwd
    [ -x "$(command -v rpm-ostree)" ] && sudo systemctl enable rpm-ostreed-automatic.timer

    echo '[updates-archive]
name=Fedora $releasever - $basearch - Updates Archive
baseurl=https://fedoraproject-updates-archive.fedoraproject.org/fedora/$releasever/$basearch/
enabled=AUTO_VALUE
metadata_expire=6h
repo_gpgcheck=0
type=rpm
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
skip_if_unavailable=True
cost=10000 # default is 1000' | sudo tee /etc/yum.repos.d/fedora-updates-archive.repo
}

ALMALINUX_SETUP()
{
    echo "Defaults:$USERNAME timestamp_timeout=60" | sudo tee /etc/sudoers.d/sorath
    sudo dnf update -y
    #sudo dnf install -y --nogpgcheck https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E %rhel).noarch.rpm
    sudo dnf install -y epel-release
    sudo dnf install -y --nogpgcheck https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$(rpm -E %rhel).noarch.rpm
    sudo dnf config-manager --set-enabled crb
    sudo dnf install -y tar

    sh <(curl -L https://nixos.org/nix/install) --no-daemon
    sed -i 's/nixpkgs-unstable/nixos-22.05/g' .nix-channels
    . $HOME/.nix-profile/etc/profile.d/nix.sh

    nix-env -iA nixpkgs.stow nixpkgs.android-tools nixpkgs.ffmpegthumbnailer nixpkgs.fzf nixpkgs.scrot nixpkgs.xdotool nixpkgs.btrfs-progs nixpkgs.dunst nixpkgs.feh \
      nixpkgs.trash-cli nixpkgs.zathura nixpkgs.pandoc  nixpkgs.qutebrowser nixpkgs.transmission-gtk  nixpkgs.signal-desktop  nixpkgs.tdesktop nixpkgs.light \
      nixpkgs.picom nixpkgs.sox nixpkgs.udiskie nixpkgs.python310Packages.adblock nixpkgs.ueberzug

    echo "max_parallel_downloads=10
    deltarpm=True
    defaultyes=True" | sudo tee -a /etc/dnf/dnf.conf
}

ROCKY_SETUP()
{
  ALMALINUX_SETUP
}

CENTOS_SETUP()
{
  ALMALINUX_SETUP
}

FREEBSD_SETUP()
{
  doas pkg install -y ncurses dsbmd fusefs-lkl portmaster nsxiv qutebrowser
  doas sysrc dbus_enable=YES
  doas sysrc openntpd_enable=YES
  doas sysrc hald_enable=YES
  doas sysrc moused_enable=YES
  doas sysrc linux_enable=YES
  echo "kern.evdev.rcpt_mask=3" | doas tee -a /etc/sysctl.conf
  cp .config/suckless/dwm-6.3/config.bsd .config/suckless/dwm-6.3/config.mk
  cp .config/suckless/dmenu-5.1/config.bsd .config/suckless/dmenu-5.1/config.mk
  cp .config/suckless/st-0.8.5/config.bsd .config/suckless/st-0.8.5/config.mk
  cd $HOME/.config/suckless/dwm-6.3; doas make clean install
  cd $HOME/.config/suckless/dmenu-5.1; doas make clean install
  cd $HOME/.config/suckless/st-0.8.5; doas make clean install
  cd $HOME/.config/suckless/dwmblocks; cp Makefile.bsd Makefile; doas make clean install
  #cd $HOME/.config/suckless/sxiv; doas make clean install
  cd $HOME
}

OPENBSD_SETUP()
{
  #doas pkg_add -i gcc%11 keepassxc-- rsync-- unzip-- w3m--
  cp .config/suckless/dwm-6.3/config.bsd .config/suckless/dwm-6.3/config.mk
  cp .config/suckless/dmenu-5.1/config.bsd .config/suckless/dmenu-5.1/config.mk
  cp .config/suckless/st-0.8.5/config.bsd .config/suckless/st-0.8.5/config.mk
  cd $HOME/.config/suckless/dwm-6.3; doas make clean install
  cd $HOME/.config/suckless/dmenu-5.1; doas make clean install
  cd $HOME/.config/suckless/st-0.8.5; doas make clean install
  cd $HOME/.config/suckless/dwmblocks; cp Makefile.bsd Makefile; doas make clean install
  cd $HOME/.config/suckless/sxiv; doas make clean install
  cd $HOME
}

NIXOS_SETUP()
{
  mkdir .config
  curl -L https://raw.githubusercontent.com/sorathpanzer/nixos/main/configuration.nix > configuration.nix
  sed -i s/luks-/$(lsblk -l | grep luks | awk '{print $1}')/g configuration.nix
  cp .config/suckless/dwm-6.3/config.nixos .config/suckless/dwm-6.3/config.mk
  cp .config/suckless/dmenu-5.1/config.nixos .config/suckless/dmenu-5.1/config.mk
  cp .config/suckless/st-0.8.5/config.nixos .config/suckless/st-0.8.5/config.mk
  sudo mv configuration.nix /etc/nixos
  sudo nixos-rebuild boot
}

VOID_SETUP()
{
  echo "permit persist $USERNAME as root
permit nopass sorath as root cmd wg-quick
permit nopass sorath cmd wg
permit nopass sorath cmd ostree
permit nopass sorath cmd reboot
permit nopass sorath cmd poweroff
permit nopass sorath cmd setleds" | $SUDOAS tee /etc/doas.conf

doas xbps-install -Syu
doas xbps-install -Sy make pkg-config
}

DEBIAN_SETUP()
{
  sudo apt-get -y install firefox-esr
}

UBUNTU_SETUP()
{
  sudo apt-get -y install firefox
}

DEVUAN_SETUP()
{
  sudo apt-get -y install firefox-esr
}

ARCH_SETUP()
{
  echo "Installing..."
}

ALPINE_SETUP()
{
  doas apk add lsblk make musl-dev ncurses
  doas setup-xorg-base
}

OPENSUSE_SETUP()
{
  sudo zypper install -y make ncurses-devel posix_cc

  TUMBLEWEED=$(cat /etc/os-release | grep ^NAME= | cut -d '=' -f2 | awk '{print $2}' | tr -d '"')
  if [ $TUMBLEWEED = Tumbleweed ]; then
    sudo zypper install -y android-tools
  fi
}

INSTALL_PACKAGES()
{
  $PKGINSTALL ffmpeg git groff i3lock neovim mpv pipewire syncthing usbutils wireguard-tools xclip xdg-user-dirs zsh \
    ${ADBLOCK[$POS]} ${ANDROIDTOOLS[$POS]} ${BTRFSPROGS[$POS]} ${CRONTABS[$POS]} ${DBUSX11[$POS]} ${DUNST[$POS]} ${FEH[$POS]} ${FFTHUMBNAILER[$POS]} ${FIREFOX[$POS]} \
    ${FLATPAK[$POS]} ${FZF[$POS]} ${GIFLIB[$POS]} ${GRUBBY[$POS]} ${IMAGEMAGICK[$POS]} ${LIBXFT[$POS]} ${IMLIB2[$POS]} ${LIBREOFFICE[$POS]} ${LIBREOFFPT[$POS]} ${LF[$POS]} \
    ${LIGHT[$POS]} ${LIBEXIF[$POS]} ${LIBX11[$POS]} ${LIBXINERAMA[$POS]} ${LMSENSORS[$POS]} ${NTFS3G[$POS]} ${PANDOCPDF[$POS]} ${PICOM[$POS]} ${POPPLERUTILS[$POS]} ${UNZIP[$POS]}  \
    ${PAUTILS[$POS]} ${PYTHON[$POS]} ${PYTHON3PIP[$POS]} ${PYTHON3SIX[$POS]} ${QEMU[$POS]} ${SCROT[$POS]} ${SOX[$POS]} ${STOW[$POS]} ${TIG[$POS]} ${TRASHCLI[$POS]} ${RSYNC[$POS]} \
    ${TELEGRAM[$POS]} ${UDISKIE[$POS]} ${UEBERZUG[$POS]} ${XDOTOOL[$POS]} ${XINPUT[$POS]} ${XF86INTEL[$POS]} ${XORGSERVER[$POS]} ${XINIT[$POS]} ${XRANDR[$POS]} ${GCC[$POS]} \
    ${XRDB[$POS]} ${XSET[$POS]} ${YOUTUBEDL[$POS]} ${ZATHURA[$POS]} ${ZATHURAPDF[$POS]} ${PIPEWIRE[$POS]} ${W3M[$POS]} ${KEEPASSXC[$POS]}

  [ -x "$(command -v rpm-ostree)" ] && sudo rpm-ostree ex apply-live --allow-replacement

  if [ $RELEASE = Fedora ] || [ $RELEASE = "AlmaLinux" ]; then
    sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    sudo flatpak install org.signal.Signal -y
    [ $RELEASE = "AlmaLinux" ] && sudo flatpak install org.qutebrowser.qutebrowser -y
  fi
}

  CONFIGURE_HOME()
  {
  [ -e .profile ] && rm .profile
  mkdir -p /home/$USERNAME/{Transferências,Documentos,Música,Imagens/Screenshots,Vídeos,.config,.cache/{lf,transmission}}
  mkdir -p /home/$USERNAME/.local/share/{backgrounds,gvfs-metadata,icc,keyrings,nvim,sounds,Trash,xorg}
  touch /home/$USERNAME/.local/recently-used.xbel
  git config --global user.name "$GIT_USERNAME"
  git config --global user.email "$GIT_EMAIL"
  echo "Cloning my dotfiles..."
  git clone $DOTFILES /home/$USERNAME/.config/dotgit
  git config --global credential.helper store
  mkdir -p /home/$USERNAME/.cache/zsh
  touch /home/$USERNAME/.cache/zsh/history
  sh -c "cd /home/$USERNAME/.config/dotgit; stow -vt ~ dotfiles"

  if [ $RELEASE != Void ]; then
    pip install --user adblock
    pip install --user ueberzug
  fi

  cp $HOME/.config/suckless/dwm-6.3/config.tux $HOME/.config/suckless/dwm-6.3/config.mk
  cd $HOME/.config/suckless/dwm-6.3; make clean install
  cp $HOME/.config/suckless/dmenu-5.1/config.tux $HOME/.config/suckless/dmenu-5.1/config.mk
  cd $HOME/.config/suckless/dmenu-5.1; make clean install
  cp $HOME/.config/suckless/st-0.8.5/config.tux $HOME/.config/suckless/st-0.8.5/config.mk
  cd $HOME/.config/suckless/st-0.8.5; make clean install
  cd $HOME/.config/suckless/dwmblocks; make clean install
  cd

  if [ $RELEASE != FreeBSD ]; then
    NVME=$(lsblk -l | grep sda | head -n 1 | awk '{print $1}')
    SDA=$(lsblk -l | grep sda | head -n 1 | awk '{print $1}')

    if [ ! -z $LVM_PASSWORD ]; then
      echo "Open vault password:"
      mkdir Vault
      echo -n "$LVM_PASSWORD" | $SUDOAS cryptsetup open --type luks /dev/sda1 Vault
      $SUDOAS mount /dev/mapper/Vault Vault
      rsync -avrop Vault/Documentos/BackHome/ /home/$USERNAME
      $SUDOAS cp $HOME/Documentos/wg0.conf /etc/wireguard
    fi
  fi
  }

  CONFIGURE_SYSTEM()
  {
  $SUDOAS usermod -s /usr/bin/zsh $USER
  echo "$USERNAME" | $SUDOAS tee -a /etc/shutdown.allow
  $SUDOAS grubby --update-kernel=ALL --args=quiet
  #echo "blacklist ideapad_laptop" | $SUDOAS tee /etc/modprobe.d/blacklist.conf

  $SUDOAS mkdir -p /etc/polkit-1/rules.d/
  echo '/* Allow members of the wheel group to execute any actions
  * without password authentication, similar to "sudo NOPASSWD:"
  */
  polkit.addRule(function(action, subject) {
    if (subject.isInGroup("wheel")) {
      return polkit.Result.YES;
    }
  });' | $SUDOAS tee /etc/polkit-1/rules.d/49-nopasswd_global.rules

  #echo 'Section "Device"
  #Identifier "Intel Graphics"
  #Driver "intel"
  #Option "TearFree" "true"
  #Option "DRI" "False"
  #EndSection' | $SUDOAS tee /etc/X11/xorg.conf.d/20-intel.conf

  if [ $RELEASE != Void ]; then
    echo "[Unit]
  Description=Lock X session using slock for user %i
  Before=sleep.target
  [Service]
  User=%i
  Type=forking
  Environment=DISPLAY=:0
  ExecStart=/usr/bin/xset dpms force suspend
  ExecStartPre=/usr/bin/i3lock -c 000000
  [Install]
  WantedBy=sleep.target" | $SUDOAS tee /etc/systemd/system/suspend@.service

    $SUDOAS mkdir -p /etc/systemd/system/getty@tty1.service.d/
    $SUDOAS touch /etc/systemd/system/getty@tty1.service.d/override.conf
    echo '[Service]
  ExecStart=
  ExecStart=-/usr/sbin/agetty --autologin sorath --noclear %I $TERM' | $SUDOAS tee /etc/systemd/system/getty@tty1.service.d/override.conf

    $SUDOAS systemctl enable suspend@$USERNAME.service
    $SUDOAS touch /etc/sudoers.d/$USERNAME
    echo "$USERNAME ALL=(ALL) NOPASSWD: /usr/bin/wg-quick,/usr/bin/wg,/usr/bin/ostree,/usr/sbin/reboot,/usr/sbin/poweroff,/usr/bin/setleds" | $SUDOAS tee /etc/sudoers.d/sorath
  fi
  }

CONFIGURE_PACKAGES

case "${RELEASE}" in
  Debian|Ubuntu|Devuan|Fedora|AlmaLinux|Rocky|CentOS|Arch|Void|Alpine|openSUSE)
    ${UPPERCASE}_SETUP
    INSTALL_PACKAGES
    CONFIGURE_HOME
    CONFIGURE_SYSTEM ;;
  FreeBSD|OpenBSD)
    INSTALL_PACKAGES
    CONFIGURE_HOME
    $UPPERCASE_SETUP ;;
  NixOS)
    CONFIGURE_HOME
    $UPPERCASE_SETUP ;;
esac

cat install.error | grep error
