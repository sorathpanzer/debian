#!/usr/bin/env bash

# Version= 0.4.7

# TODO: Improvements in the script
# lsblk (how to detect second drive)
# In OpenSuse there is no android-tools lf trash-cli light by default
# MicrOS: git, stow, make (useradd -m, and visudo)
# In OpenBSD install qutebrowser separatily
# NixOS put setleds in sudoers

# TODO: Before running this script you must install:
# FreeBSD -> doas, bash >>>>>>>> "permit nopass keepenv $USER as root" to doas.conf
# OpenBSD|Alpine -> bash
# Devuan -> curl (delete "cdrom" line from sources.list)

exec 1> >(tee "install.log") 2> >(tee "install.error")

LVM_PASSWORD=""
GIT_USERNAME="${USER}panzer"
GIT_EMAIL="$GIT_USERNAME"
DOTFILES="http://192.168.1.108:3000/sorath/dotgit.git"
#DOTFILES="https://gitea.com/sorathpanzer/dotgit.git"

CONFIGURE_PACKAGES()
{
  RELEASE=$(grep ^NAME= /etc/os-release | cut -d '=' -f2 | awk '{print $1}' | tr -d '"')
  UPPERCASE=$(echo $RELEASE | tr '[:lower:]' '[:upper:]')

  NA=" "
  # DISTRO=(      Debian/Devuan             Fedora                AlmaLinux/Rocky/CentOS  Arch                Artix               Void                Alpine              OpenSuse                    FreeBSD               OpenBSD             )
  #---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------)
  ADBLOCK=(       "$NA"                     "$NA"                 "$NA"                   python-adblock      python-adblock      python3-adblock     py3-adblock         "$NA"                       py39-adblock          py3-adblock         )
  ANDROIDTOOLS=(  android-tools-adb         android-tools         "$NA"                   android-tools       "$NA"               android-tools       android-tools       "$NA"                       android-tools         "$NA"               )
  BTRFSPROGS=(    btrfs-progs               btrfs-progs           "$NA"                   btrfs-progs         btrfs-progs         btrfs-progs         btrfs-progs         btrfsprogs                  "$NA"                 "$NA"               )
  CRONTABS=(      python3-crontab           crontabs              crontabs                "$NA"               "$NA"               "$NA"               "$NA"               python3-crontab             py39-python-crontab   "$NA"               )
  DBUSX11=(       dbus-x11                  dbus-x11              dbus-x11                dbus                dbus                dbus-x11            dbus-x11            dbus-1-x11                  dbus                  dbus                )
  DOAS=(          "$NA"                     "$NA"                 "$NA"                   "$NA"               "$NA"               "$NA"               doas                "$NA"                       doas                  "$NA"               )
  DUNST=(         dunst                     dunst                 "$NA"                   dunst               dunst               dunst               dunst               dunst                       dunst                 dunst               )
  EMACSNX=(       emacs-nox                 emacs-nox             emacs-nox               emacs-nox           emacs-nox           emacs               emacs-nox           emacs-nox                   emacs-nox             emacs-nosx          )
  FEH=(           feh                       feh                   "$NA"                   feh                 feh                 feh                 feh                 feh                         feh                   feh                 )
  FFTHUMBNAILER=( ffmpegthumbnailer         ffmpegthumbnailer     "$NA"                   ffmpegthumbnailer   ffmpegthumbnailer   ffmpegthumbnailer   ffmpegthumbnailer   ffmpegthumbnailer           ffmpegthumbnailer     ffmpegthumbnailer   )
  FIREFOX=(       firefox-esr               firefox               firefox                 firefox             firefox             firefox             firefox             MozillaFirefox              firefox-esr           firefox-esr         )
  FLATPAK=(       flatpak                   "$NA"                 flatpak                 flatpak             flatpak             flatpak             flatpak             flatpak                     "$NA"                 "$NA"               )
  FZF=(           fzf                       fzf                   "$NA"                   fzf                 fzf                 fzf                 fzf                 fzf                         fzf                   fzf                 )
  GCC=(           gcc                       "$NA"                 gcc                     gcc                 gcc                 "$NA"               gcc                 gcc                         gcc                   gcc%11              )
  GIFLIB=(        libgif-dev                "$NA"                 giflib-devel            giflib              giflib              giflib-devel        giflib-dev          giflib-devel                giflib                giflib              )
  GIT=(           git                       "$NA"                 git                     git                 git                 git                 git                 git                         git                   git                 )
  IMAGEMAGICK=(   imagemagick               ImageMagick           ImageMagick             imagemagick         imagemagick         ImageMagick         imagemagick         ImageMagick                 ImageMagick7-nox11    ImageMagick         )
  IMLIB2=(        libimlib2-dev             "$NA"                 imlib2-devel            imlib2              imlib2              imlib2-devel        imlib2-dev          imlib2-devel                imlib2                imlib2              )
  LF=(            "$NA"                     "$NA"                 "$NA"                   lf                  "$NA"               lf                  lf                  "$NA"                       lf                    lf                  )
  LIBEXIF=(       libexif-dev               "$NA"                 libexif-devel           libexif             libexif             libexif-devel       libexif-dev         libexif-devel               libexif               libexif             )
  LIBREOFFICE=(   libreoffice-calc          libreoffice-calc      libreoffice-calc        libreoffice-still   "$NA"               libreoffice-calc    "$NA"               libreoffice-calc            libreoffice           libreoffice         )
  LIBX11=(        libx11-dev                "$NA"                 libX11-devel            libx11              libx11              libX11-devel        libx11-dev          libX11-devel                libX11                "$NA"               )
  LIBXFT=(        libxft-dev                "$NA"                 libXft-devel            libxft              libxft              libXft-devel        libxft-dev          libXft-devel                libXft                "$NA"               )
  LIBXINERAMA=(   libxinerama-dev           "$NA"                 libXinerama-devel       libxinerama         libxinerama         libXinerama-devel   libxinerama-dev     libXinerama-devel           libXinerama           "$NA"               )
  LIBXRESDEV=(    libxres-dev               libXres-devel         libXres-devel           libxres             libxres             libXres-devel       libxres-dev         libXres-devel               libXres               "$NA"               )
  LIGHT=(         light                     light                 "$NA"                   light               "$NA"               light               light               "$NA"                       "$NA"                 "$NA"               )
  LMSENSORS=(     lm-sensors                lm_sensors            lm_sensors              lm_sensors          lm_sensors          lm_sensors          lm-sensors          sensors                     "$NA"                 "$NA"               )
  NFSUTILS=(      nfs-common                nfs-utils             nfs-utils               nfs-utils           nfs-utils           nfs-utils           nfs-utils           nfs-utils                   "$NA"                 "$NA"               )
  NMTUI=(         "$NA"                     NetworkManager-tui    NetworkManager-tui      "$NA"               "$NA"               "$NA"               networkmanager-tui  "$NA"                       "$NA"                 networkmanager-tui  )
  NTFS3G=(        ntfs-3g                   ntfs-3g               ntfs-3g                 ntfs-3g             ntfs-3g             ntfs-3g             ntfs-3g             ntfs-3g                     fusefs-ntfs           ntfs_3g             )
  OVMF=(          ovmf                      edk2-ovmf             edk2-ovmf               edk2-ovmf           edk2-ovmf           "$NA"               ovmf                ovmf                        "$NA"                 "$NA"               )
  PANDOCPDF=(     pandoc                    pandoc-pdf            pandoc-pdf              pandoc              pandoc              pandoc              "$NA"               pandoc                      "$NA"                 pandoc              )
  PICOM=(         picom                     picom                 "$NA"                   picom               picom               picom               picom               picom                       picom                 picom               )
  POPPLERUTILS=(  poppler-utils             poppler-utils         poppler                 poppler             poppler             poppler-utils       poppler-utils       poppler-tools               poppler-utils         poppler-utils       )
  PAUTILS=(       pulseaudio-utils          pulseaudio-utils      pulseaudio-utils        "$NA"               "$NA"               pulseaudio-utils    pulseaudio-utils    pulseaudio-utils            "$NA"                 pulseaudio          )
  PYTHON=(        "$NA"                     python3-devel         python3-devel           "$NA"               "$NA"               python3-devel       python3-dev         python3-devel               python311             python3             )
  PYTHON3PIP=(    python3-pip               "$NA"                 python-pip              python-pip          python-pip          python3-pip         py3-pip             python3-pip                 py39-pip              py3-pip             )
  PYTHON3SIX=(    python3-six               python3-six           python-six              python-six          python-six          python3-six         py3-six             python3-six                 py39-six              py3-six             )
  QEMU=(          qemu                      "$NA"                  qemu-img                qemu-base           qemu-base           qemu                qemu-system-x86_64  qemu                        qemu                  qemu                )
  QUTEBROWSER=(   qutebrowser               qutebrowser           "$NA"                   qutebrowser         qutebrowser         qutebrowser         qutebrowser         qutebrowser                 qutebrowser           qutebrowser         )
  SCROT=(         scrot                     scrot                 "$NA"                   scrot               scrot               scrot               scrot               scrot                       scrot                 scrot               )
  SOX=(           sox                       sox                   sox                     sox                 sox                 sox                 sox                 sox                         sox                   sox                 )
  STOW=(          stow                      "$NA"                 stow                    stow                "$NA"               stow                stow                stow                        stow                  stow                )
  TELEGRAM=(      telegram-desktop          telegram-desktop      "$NA"                   telegram-desktop    "$NA"               telegram-desktop    telegram-desktop    telegram-desktop            telegram-desktop      "$NA"               )
  TIG=(           tig                       tig                   tig                     tig                 "$NA"               tig                 tig                 "$NA"                       tig                   tig                 )
  TRASHCLI=(      trash-cli                 trash-cli             "$NA"                   trash-cli           "$NA"               trash-cli           trash-cli           "$NA"                       "$NA"                 "$NA"               )
  UEBERZUG=(      "$NA"                     "$NA"                 "$NA"                   ueberzug            "$NA"               ueberzug            "$NA"               "$NA"                       py39-ueberzug         "$NA"               )
  UDISKIE=(       udiskie                   udiskie               "$NA"                   udiskie             udiskie             udiskie             udiskie             udiskie                     "$NA"                 "$NA"               )
  XDOTOOL=(       xdotool                   xdotool               xdotool                 xdotool             xdotool             xdotool             xdotool             xdotool                     xdotool               xdotool             )
  XF86INTEL=(     xserver-xorg-video-intel  xorg-x11-drv-intel    "$NA"                   xf86-video-intel    xf86-video-intel    xf86-video-intel    xf86-video-intel    xf86-video-intel            xf86-video-intel      "$NA"               )
  XINIT=(         xinit                     xorg-x11-xinit        xorg-x11-xinit          xorg-xinit          xorg-xinit          xinit               xinit               xinit                       xinit                 "$NA"               )
  XINPUT=(        xinput                    xinput                xinput                  xorg-xinput         xorg-xinput         xinput              xinput              xinput                      xinput                "$NA"               )
  XORGSERVER=(    xserver-xorg              xorg-x11-server-Xorg  xorg-x11-server-Xorg    xorg-server         xorg-server         xorg-minimal        xorg-server         xorg-x11-server             xorg-minimal          "$NA"               )
  XRANDR=(        x11-xserver-utils         xrandr                xrandr                  xorg-xrandr         xorg-xrandr         xrandr              xrandr              xrandr                      xrandr                "$NA"               )
  XRDB=(          x11-xserver-utils         xrdb                  xrdb                    xorg-xrdb           xorg-xrdb           xrdb                xrdb                xrdb                        xrdb                  "$NA"               )
  XSET=(          x11-xserver-utils         xset                  xset                    xorg-xset           xorg-xset           xset                xset                xset                        xset                  "$NA"               )
  YOUTUBEDL=(     youtube-dl                youtube-dl            youtube-dl              youtube-dl          youtube-dl          youtube-dl          youtube-dl          youtube-dl                  youtube_dl            youtube-dl          )
  ZATHURA=(       zathura                   zathura               zathura                 zathura             zathura             zathura             zathura             zathura                     zathura               zathura             )
  ZATHURAPDF=(    zathura-pdf-poppler       zathura-pdf-poppler   zathura-pdf-poppler     zathura-pdf-poppler "$NA"               zathura-pdf-poppler zathura-pdf-poppler zathura-plugin-pdf-poppler  zathura-pdf-poppler   zathura-pdf-poppler )
  ZFS=(           zfsutils-linux            "$NA"                 "$NA"                   "zfs-utils"         "$NA"               zfs                 zfs                 "$NA"                       "$NA"                 "$NA"               )

  case "${RELEASE}" in
    "")                  echo "$RELEASE is not supported!"; exit 1 ;;
    Debian|Devuan)	POS="0"
      MK="tux"
      PKGINSTALL="sudo apt-get -y install" ;;
    Fedora)               POS="1"
      MK="tux"
      PKGINSTALL="sudo rpm-ostree install" ;;
    AlmaLinux|Rocky|CentOS)  POS="2"
      MK="tux"
      PKGINSTALL="sudo dnf install -y" ;;
    Arch)               POS="3"
      MK="tux"
      PKGINSTALL="sudo pacman --noconfirm -S" ;;
    Artix)               POS="4"
      MK="tux"
      PKGINSTALL="sudo pacman --noconfirm -S" ;;
    Void)               POS="5"
      MK="tux"
      PKGINSTALL="doas xbps-install -Sy" ;;
    Alpine)             POS="6"
      MK="tux"
      PKGINSTALL="doas apk add" ;;
    openSUSE)           POS="7"
      MK="tux"
      PKGINSTALL="sudo zypper install -y" ;;
    FreeBSD)            POS="8"
      MK="bsd"
      PKGINSTALL="doas pkg install -y" ;;
    OpenBSD)            POS="9"
      MK="bsd"
      PKGINSTALL="doas pkg_add -i" ;;
    NixOS)  MK="nixos" ;;
  esac

  if [ $RELEASE = NixOS ]; then
    sudo sed -i 's/#  vim/git/' /etc/nixos/configuration.nix
    sudo sed -i 's/#  wget/stow/' /etc/nixos/configuration.nix

    sudo sed -i -e :a -e '$d;N;2,2ba' -e 'P;D' /etc/nixos/configuration.nix
    sudo tee -a /etc/nixos/configuration.nix << EOF
security.sudo.configFile = ''
  Defaults:$USER timestamp_timeout=60
'';
}
EOF

sudo nixos-rebuild switch
  fi

  if [ $RELEASE = Alpine ] || [ $RELEASE = FreeBSD ] || [ $RELEASE = OpenBSD ]; then
    SUDOAS="doas"
  else
    SUDOAS="sudo"
  fi

  if [ $RELEASE = Alpine ]; then
    mkdir -p /etc/doas.d
    DOASCONF="/etc/doas.d/doas.conf"
  else
    DOASCONF="/etc/doas.conf"
  fi

  if [ $RELEASE = Void ] || [ $RELEASE = Alpine ] || [ $RELEASE = FreeBSD ] || [ $RELEASE = OpenBSD ]; then
    $SUDOAS tee $DOASCONF << EOF
permit persist $USER as root
permit nopass $USER cmd reboot
permit nopass $USER cmd poweroff
permit nopass $USER cmd mount
permit nopass $USER cmd setleds
EOF
  fi

  if [ $RELEASE = NixOS ]; then
    $SUDOAS sed -i 's/#  vim/git/' /etc/nixos/configuration.nix
    $SUDOAS sed -i 's/#  wget/stow/' /etc/nixos/configuration.nix

    $SUDOAS sed -i -e :a -e '$d;N;2,2ba' -e 'P;D' /etc/nixos/configuration.nix
    $SUDOAS tee -a /etc/nixos/configuration.nix << EOF
security.sudo.configFile = ''
  Defaults:$USER timestamp_timeout=60
'';
}
EOF

sudo nixos-rebuild switch
  fi
}

ALMALINUX_SETUP()
{
  echo "Defaults:$USER timestamp_timeout=60" | $SUDOAS tee /etc/sudoers.d/$USER
  $SUDOAS dnf update -y
  $SUDOAS dnf install -y epel-release
  $SUDOAS dnf install -y --nogpgcheck https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-"$(rpm -E %rhel)".noarch.rpm
  $SUDOAS dnf config-manager --set-enabled crb
  $SUDOAS dnf install -y tar grubby

  sh <(curl -L https://nixos.org/nix/install) --no-daemon
  sed -i 's/nixpkgs-unstable/nixos-22.11/g' .nix-channels
  . $HOME/.nix-profile/etc/profile.d/nix.sh
  nix-channel --update

  nix-env -iA nixpkgs.nix nixpkgs.cacert
  nix-env -iA nixpkgs.android-tools nixpkgs.ffmpegthumbnailer nixpkgs.fzf nixpkgs.scrot nixpkgs.btrfs-progs nixpkgs.dunst nixpkgs.feh \
    nixpkgs.trash-cli nixpkgs.transmission-gtk nixpkgs.light \
    nixpkgs.picom nixpkgs.udiskie nixpkgs.python310Packages.adblock nixpkgs.ueberzug
      . $HOME/.nix-profile/etc/profile.d/nix.sh

      $SUDOAS tee -a /etc/dnf/dnf.conf << EOF
max_parallel_downloads=10
deltarpm=True
defaultyes=True
EOF

  $SUDOAS grubby --update-kernel=ALL --args=quiet

  $SUDOAS dnf install -y https://zfsonlinux.org/epel/zfs-release-2-2"$(rpm --eval "%{dist}")".noarch.rpm
  $SUDOAS dnf install -y zfs
}

ALPINE_SETUP()
{
  echo "" | $SUDOAS tee /etc/motd

  $SUDOAS setup-xorg-base
  #echo "https://dl-cdn.alpinelinux.org/alpine/latest-stable/main
  #https://dl-cdn.alpinelinux.org/alpine/latest-stable/community" | $SUDOAS tee /etc/apk/repositories

  echo '#!/bin/sh

  echo performance > /sys/devices/system/cpu/cpufreq/policy0/scaling_governor' | $SUDOAS tee /etc/local.d/cpufreq.start
  $SUDOAS chmod +x /etc/local.d/cpufreq.start

  $SUDOAS adduser $USER input
  $SUDOAS apk -U upgrade
  $SUDOAS apk add lsblk make musl-dev ncurses xorg-server-common xorg-server-dev xproto xorgxrdp xorgxrdp-dev setxkbmap zzz ttf-dejavu \
    mesa-dri-gallium libva-intel-driver alsa-utils alsa-utils-doc alsa-lib alsaconf alsa-ucm-conf pulseaudio pulseaudio-alsa alsa-plugins-pulse \
    util-linux elogind polkit-elogind qemu-img qemu-ui-sdl qemu-hw-display-virtio-vga-gl libvirt-qemu qemu-hw-display-virtio-vga coreutils iwd networkmanager-wifi

  $SUDOAS rc-service dbus start; $SUDOAS rc-update add dbus
  $SUDOAS rc-service alsa start; $SUDOAS rc-update add alsa
  $SUDOAS rc-service local start; $SUDOAS rc-update add local default
  $SUDOAS rc-service elogind start; $SUDOAS rc-update add elogind
  $SUDOAS rc-update del networking boot
  $SUDOAS rc-update del wpa_supplicant boot
  $SUDOAS rc-update add iwd boot
  $SUDOAS rc-update add networkmanager boot
  $SUDOAS sed -i 's/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=0/g' /etc/default/grub
  $SUDOAS sed -i 's/#rc_parallel=\"NO\"/rc_parallel=\"YES\"/g' /etc/rc.conf
  $SUDOAS sed -i 's/root:\/bin\/ash/root:\/sbin\/nologin/g' /etc/passwd
  $SUDOAS sed -i "s/sbin\/getty 38400 tty1/bin\/login -f $USER/g" /etc/inittab
  $SUDOAS grub-mkconfig -o /boot/grub/grub.cfg

  $SUDOAS rm -r /media/{cdrom,usb}
  $SUDOAS mkdir -p /media/Vault

  $SUDOAS mkdir /etc/udhcpc
  echo 'RESOLV_CONF="no"' | $SUDOAS tee /etc/udhcpc/udhcpc.conf

  echo "nameserver 1.1.1.1
  nameserver 8.8.8.8" | $SUDOAS tee /etc/resolv.conf

  echo "dns=none

  [device]
  wifi.backend=iwd" | $SUDOAS tee -a /etc/NetworkManager/NetworkManager.conf

  echo " " | $SUDOAS tee /etc/network/interfaces
}

ARCH_SETUP()
{
  $PKGINSTALL --needed base-devel git
  git clone https://aur.archlinux.org/trizen.git
  cd trizen || exit
  makepkg -si
  cd || exit
  rm -R trizen

  curl -L https://archzfs.com/archzfs.gpg | $SUDOAS pacman-key -a -
  $SUDOAS pacman-key --lsign-key "$(curl -L https://git.io/JsfVS)"
  curl -L https://git.io/Jsfw2 | $SUDOAS tee /etc/pacman.d/mirrorlist-archzfs

  $SUDOAS tee -a /etc/pacman.conf << EOF

#[archzfs-testing]
#Include = /etc/pacman.d/mirrorlist-archzfs

[archzfs]
Include = /etc/pacman.d/mirrorlist-archzfs
EOF

  $SUDOAS pacman --noconfirm -Syu
  $PKGINSTALL linux-lts-headers zfs-dkms zfs-utils
}

ARTIX_SETUP()
{
  ARCH_SETUP
  sh <(curl -L https://nixos.org/nix/install) --no-daemon
  sed -i 's/nixpkgs-unstable/nixos-22.11/g' .nix-channels
  . $HOME/.nix-profile/etc/profile.d/nix.sh
  nix-channel --update

  nix-env -iA nixpkgs.nix nixpkgs.cacert
  nix-env -iA nixpkgs.android-tools nixpkgs.trash-cli nixpkgs.light nixpkgs.lf nixpkgs.stow nixpkgs.tig
  . $HOME/.nix-profile/etc/profile.d/nix.sh

  $SUDOAS sed -i "s/agetty.*/agetty --autologin \$USER --noclear tty1 38400 linux" /etc/dinit.d/getty.d/tty1
}

CENTOS_SETUP()
{
  ALMALINUX_SETUP
}

DEBIAN_SETUP()
{
  $PKGINSTALL pulseaudio pulsemixer man2html
  [[ $RELEASE = Debian ]] && systemctl --user --now enable pulseaudio
  [[ $RELEASE = Debian ]] && systemctl --user --now enable pipewire.service pipewire-pulse
  echo "deb http://deb.debian.org/debian bullseye-backports main contrib" | $SUDOAS tee /etc/apt/sources.list.d/bullseye-backports.list
  $SUDOAS tee /etc/apt/preferences.d/90_zfs << EOF
Package: src:zfs-linux
Pin: release n=bullseye-backports
Pin-Priority: 990
EOF

  $SUDOAS apt-get update; $SUDOAS apt upgrade -y
  $PKGINSTALL dpkg-dev linux-headers-generic linux-image-generic
  $SUDOAS DEBIAN_FRONTEND=noninteractive apt install -y zfs-dkms zfsutils-linux
}

DEVUAN_SETUP()
{
  INIT="$(which rc-status | which sv)"
    if [ "$INIT" = "/usr/bin/sv" ]; then
    $SUDOAS sed -i '$d' /etc/service/getty-tty1/run
  echo "exec chpst -P getty --autologin $USER 38400 tty1 linux" | $SUDOAS tee -a /etc/service/getty-tty1/run
  fi

  if [ "$INIT" = "/bin/rc-status" ] || [ -z "$INIT" ]; then
    $SUDOAS sed -i "s/noclear/autologin $USER/g" /etc/inittab
  fi

  DEBIAN_SETUP
}

FEDORA_SETUP()
{
  [ ! -x "$(command -v rpm-ostree)" ] && echo "max_parallel_downloads=10
  deltarpm=True
  defaultyes=True" | $SUDOAS tee -a /etc/dnf/dnf.conf

  echo "Defaults:$USER timestamp_timeout=60" | $SUDOAS tee /etc/sudoers.d/$USER
  [ -x "$(command -v rpm-ostree)" ] && $SUDOAS rpm-ostree override remove zezere-ignition ignition dbus-parsec
  $PKGINSTALL https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-"$(rpm -E %fedora)".noarch.rpm
  [ -x "$(command -v rpm-ostree)" ] && $PKGINSTALL git make python3-pip grubby stow gcc libX11-devel imlib2-devel flatpak libXft-devel libXinerama-devel freetype-devel libexif-devel giflib-devel qemu-img qemu-system-x86
  [ -x "$(command -v rpm-ostree)" ] && $SUDOAS rpm-ostree ex apply-live --allow-replacement
  [ -x "$(command -v rpm-ostree)" ] && $SUDOAS sed -i 's/none/stage/g' /etc/rpm-ostreed.conf
  [ -x "$(command -v rpm-ostree)" ] && $SUDOAS systemctl enable rpm-ostreed-automatic.timer

  $SUDOAS tee /etc/yum.repos.d/fedora-updates-archive.repo << EOF
[updates-archive]
name=Fedora \$releasever - \$basearch - Updates Archive
baseurl=https://fedoraproject-updates-archive.fedoraproject.org/fedora/\$releasever/\$basearch/
enabled=1
metadata_expire=6h
repo_gpgcheck=0
type=rpm
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-\$releasever-\$basearch
skip_if_unavailable=True
cost=10000 # default is 1000'
EOF

  [ -x "$(command -v rpm-ostree)" ] && $SUDOAS sed -i 's/#Auto/Auto/g' /etc/rpm-ostreed.conf
  [ -x "$(command -v rpm-ostree)" ] && $SUDOAS systemctl enable rpm-ostreed-automatic.timer --now

  [ ! -x "$(command -v rpm-ostree)" ] && $SUDOAS dnf install -y https://zfsonlinux.org/fedora/zfs-release-2-2"$(rpm --eval "%{dist}")".noarch.rpm
  [ ! -x "$(command -v rpm-ostree)" ] && $SUDOAS dnf install kernel-devel git make python3-pip grubby stow gcc libX11-devel imlib2-devel flatpak libXft-devel libXinerama-devel freetype-devel libexif-devel giflib-devel
  [ ! -x "$(command -v rpm-ostree)" ] && $SUDOAS dnf install -y zfs
  $SUDOAS grubby --update-kernel=ALL --args=quiet
}

FREEBSD_SETUP()
{
  $SUDOAS pkg install -y ncurses dsbmd fusefs-lkl portmaster nsxiv

  $SUDOAS tee -a /etc/rc.conf << EOF
dbus_enable=YES
openntpd_enable=YES
hald_enable=YES
moused_enable=YES
nfs_client_enable="YES"
linux_enable=YES
#rpc_lockd_enable="YES"
#rpc_statd_enable="YES""
EOF

  DWMBLOCKS="$HOME/.config/suckless/dwmblocks"
  echo "kern.evdev.rcpt_mask=3" | $SUDOAS tee -a /etc/sysctl.conf
  cp $DWMBLOCKS/Makefile.bsd $DWMBLOCKS/Makefile; $SUDOAS make $DWMBLOCKS install clean
  #$SUDOAS make -C $HOME/.config/suckless/sxiv install clean
}

NIXOS_SETUP()
{
  mkdir .config
  curl -L https://raw.githubusercontent.com/sorathpanzer/nixos/main/configuration.nix > configuration.nix
  #sed -i s/luks-/$(lsblk -l | grep luks | awk '{print $1}')/g configuration.nix
  sed -i s/HOSTID/"$(head -c 8 /etc/machine-id)"/g configuration.nix
  $SUDOAS cp configuration.nix /etc/nixos/configuration.nix
  $SUDOAS nixos-rebuild boot
}

OPENBSD_SETUP()
{
  $SUDOAS pkg_add -i gcc%11 keepassxc-- rsync-- unzip-- w3m--
}

OPENSUSE_SETUP()
{
  echo "Defaults:$USER timestamp_timeout=60" | $SUDOAS tee /etc/sudoers.d/$USER
  $SUDOAS touch /.root.key
  $SUDOAS chmod 600 /.root.key
  $SUDOAS dd if=/dev/urandom of=/.root.key bs=1024 count=1
  echo "ENTER THE PASSPHRASE OF THE DEVICE"
  $SUDOAS cryptsetup luksAddKey /dev/nvme0n1p2 /.root.key
  $SUDOAS sed -i 's/none/\/.root.key/g' /etc/crypttab
  echo -e 'install_items+=" /.root.key "' | $SUDOAS tee --append /etc/dracut.conf.d/99-root-key.conf > /dev/null
  echo "/boot/ root:root 700" | $SUDOAS tee -a /etc/permissions.local
  $SUDOAS chkstat --system --set
  $SUDOAS dracut -f
  $SUDOAS sed -i 's/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=0/g' /etc/default/grub
  $SUDOAS grub2-mkconfig -o /boot/grub2/grub.cfg

  $PKGINSTALL make ncurses-devel posix_cc grubby

  TUMBLEWEED=$(grep ^NAME= /etc/os-release | cut -d '=' -f2 | awk '{print $2}' | tr -d '"')
  if [ $TUMBLEWEED = Tumbleweed ]; then
    $PKGINSTALL android-tools python310-adblock
    $SUDOAS zypper addrepo https://download.opensuse.org/repositories/filesystems/openSUSE_Tumbleweed/filesystems.repo
  else
    $SUDOAS zypper addrepo https://download.opensuse.org/repositories/filesystems/15.4/filesystems.repo
  fi
  $SUDOAS zypper refresh
  $PKGINSTALL zfs
  $SUDOAS grubby --update-kernel=ALL --args=quiet
}

ROCKY_SETUP()
{
  ALMALINUX_SETUP
}

VOID_SETUP()
{
  $SUDOAS xbps-install -Syu
  $SUDOAS xbps-install -Sy make pkg-config snapper setxkbmap pulseaudio xdg-utils opendoas

  $SUDOAS snapper -c root create-config /
  $SUDOAS btrfs subvolume delete /.snapshots
  $SUDOAS mkdir /.snapshots
  $SUDOAS sed -i '/@snapshots/s/^#//' /etc/fstab

  echo "GETTY_ARGS=\"--autologin $USER --noclear\"
  BAUD_RATE=38400
  TERM_NAME=linux" | $SUDOAS tee /etc/sv/agetty-tty1/conf

  $SUDOAS ln -s /etc/sv/pipewire /var/service
  $SUDOAS ln -s /etc/sv/acpid /var/service
  $SUDOAS xbps-remove -y sudo base-system
}

INSTALL_PACKAGES()
{
  $PKGINSTALL ffmpeg groff i3lock keepassxc neovim mpv pipewire rsync syncthing unzip usbutils w3m wireguard-tools xclip xdg-user-dirs zsh ripgrep \
    ${ADBLOCK[$POS]} ${ANDROIDTOOLS[$POS]} ${BTRFSPROGS[$POS]} ${CRONTABS[$POS]} ${DBUSX11[$POS]} ${DUNST[$POS]} ${FEH[$POS]} ${FFTHUMBNAILER[$POS]} ${FIREFOX[$POS]} \
    ${FLATPAK[$POS]} ${FZF[$POS]} ${GIFLIB[$POS]} ${IMAGEMAGICK[$POS]} ${LIBXFT[$POS]} ${IMLIB2[$POS]} ${LIBREOFFICE[$POS]} ${LF[$POS]} ${NFSUTILS[$POS]} \
    ${LIGHT[$POS]} ${LIBEXIF[$POS]} ${LIBX11[$POS]} ${LIBXINERAMA[$POS]} ${LMSENSORS[$POS]} ${NTFS3G[$POS]} ${PANDOCPDF[$POS]} ${PICOM[$POS]} ${POPPLERUTILS[$POS]} ${GIT[$POS]} \
    ${PAUTILS[$POS]} ${PYTHON[$POS]} ${PYTHON3PIP[$POS]} ${PYTHON3SIX[$POS]} ${QEMU[$POS]} ${SCROT[$POS]} ${SOX[$POS]} ${STOW[$POS]} ${TIG[$POS]} ${TRASHCLI[$POS]} ${GCC[$POS]} \
    ${TELEGRAM[$POS]} ${UDISKIE[$POS]} ${UEBERZUG[$POS]} ${XDOTOOL[$POS]} ${XINPUT[$POS]} ${XF86INTEL[$POS]} ${XORGSERVER[$POS]} ${XINIT[$POS]} ${XRANDR[$POS]} ${LIBXRESDEV[$POS]} \
    ${XRDB[$POS]} ${XSET[$POS]} ${YOUTUBEDL[$POS]} ${ZATHURA[$POS]} ${ZATHURAPDF[$POS]} ${OVMF[$POS]} ${NMTUI[$POS]} ${QUTEBROWSER[$POS]} ${EMACSNX[$POS]} ${ZFS[$POS]} ${DOAS[$POS]}

  [ -x "$(command -v rpm-ostree)" ] && $SUDOAS rpm-ostree ex apply-live --allow-replacement
}

CONFIGURE_HOME()
{
  [ -e .profile ] && rm .profile
  mkdir -p /home/$USER/{Transferências,Documentos,Música,Imagens/Screenshots,Vídeos,.config,.cache/{lf,transmission}}
  mkdir -p /home/$USER/.local/share/{backgrounds,gvfs-metadata,icc,keyrings,nvim,sounds,Trash,xorg}
  $SUDOAS mkdir -p /media/Bunker
  touch /home/$USER/.local/recently-used.xbel
  git config --global user.name "$GIT_USERNAME"
  git config --global user.email "$GIT_EMAIL"
  echo "Cloning my dotfiles..."
  git clone --progress $DOTFILES /home/$USER/.config/dotgit
  git config --global credential.helper store
  mkdir -p /home/$USER/.cache/zsh
  touch /home/$USER/.cache/zsh/history
  sh -c "cd /home/$USER/.config/dotgit; stow -vt ~ dotfiles"

  if [ $RELEASE = Debian ] || [ $RELEASE = Devuan ] || [ $RELEASE = Fedora ] || [ $RELEASE = AlmaLinux ] || [ $RELEASE = Rocky ] || [ $RELEASE = CentOS ]; then
    pip install --user adblock
  fi

  cp $HOME/.config/suckless/dwm-6.4/config.$MK $HOME/.config/suckless/dwm-6.4/config.mk
  cp $HOME/.config/suckless/dmenu-5.2/config.$MK $HOME/.config/suckless/dmenu-5.2/config.mk
  cp $HOME/.config/suckless/st-0.9/config.$MK $HOME/.config/suckless/st-0.9/config.mk

  if [ $RELEASE != NixOS ]; then
    make -C $HOME/.config/suckless/dwmblocks install clean
    make -C $HOME/.config/suckless/sxiv install clean
    make -C $HOME/.config/suckless/dwm-6.4 install clean
    make -C $HOME/.config/suckless/dmenu-5.2 install clean
    [ -x "$(command -v zypper)" ] && $SUDOAS sed -i 's/#CC/CC/g' ~/.config/suckless/st-0.9/config.mk
    make -C $HOME/.config/suckless/st-0.9 install clean
  fi

  if [ $RELEASE != FreeBSD ]; then

    if [ -n "$LVM_PASSWORD" ]; then
      echo "Open vault password:"
      mkdir /media/Vault
      $SUDOAS modprobe zfs
      echo -n "$LVM_PASSWORD" | $SUDOAS zpool import -l -R /media/Vault Legion
      $SUDOAS zfs mount Legion/Vault
      rsync -avrop /media/Vault/BackHome/ /home/$USER
    fi
  fi

  if [ $RELEASE = Void ] || [ $RELEASE = Alpine ] || [ $RELEASE = FreeBSD ]; then
    $SUDOAS mkdir -p /usr/share/edk2/ovmf
    $SUDOAS cp .config/suckless/ovmf/OVMF_CODE.fd /usr/share/edk2/ovmf
  fi

  git clone --depth 1 https://github.com/wbthomason/packer.nvim\
    ~/.local/share/nvim/site/pack/packer/start/packer.nvim
}

CONFIGURE_SYSTEM()
{
  if [ $RELEASE = Alpine ]; then
    $SUDOAS adduser $USER plugdev
    $SUDOAS adduser $USER qemu
    $SUDOAS adduser $USER kvm
    $SUDOAS adduser $USER libvirt
  fi

  echo "$USER" | $SUDOAS tee -a /etc/shutdown.allow
  echo "blacklist ideapad_laptop" | $SUDOAS tee /etc/modprobe.d/blacklist.conf

  $SUDOAS mkdir /etc/X11/xorg.conf.d
  $SUDOAS tee /etc/X11/xorg.conf.d/20-intel.conf << EOF
Section "Device"
Identifier "Intel Graphics"
Driver "intel"
Option "TearFree" "true"
Option "DRI" "False"
EndSection
EOF

  $SUDOAS mkdir -p /etc/polkit-1/rules.d/
  $SUDOAS tee /etc/polkit-1/rules.d/49-nopasswd_global.rules << EOF
/* Allow members of the wheel group to execute any actions
* without password authentication, similar to "sudo NOPASSWD:"
*/
polkit.addRule(function(action, subject) {
  if (subject.isInGroup("wheel")) {
    return polkit.Result.YES;
  }
});
EOF

  if [ $RELEASE != NixOS ]; then
    echo "192.168.1.104:/mnt/Bunker/Vault	/media/Bunker	nfs	defaults,user,exec,noauto,vers=4	0 0" | $SUDOAS tee -a /etc/fstab
  fi

  $SUDOAS usermod -s $(which zsh) $USER
  $SUDOAS flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  $SUDOAS flatpak install org.signal.Signal org.qutebrowser.qutebrowser org.telegram.desktop com.github.qarmin.czkawka -y
  [ $RELEASE = "Alpine" ] && $SUDOAS flatpak install org.libreoffice.LibreOffice -y
  $SUDOAS mkdir -p /etc/modules-load.d
  echo zfs | $SUDOAS tee /etc/modules-load.d/zfs.conf

  if ! [[ $RELEASE = Arch || $RELEASE = Void || $RELEASE = AlmaLinux ]]; then
    git clone https://github.com/sorathpanzer/ueberzug.git
    pip install --user ./ueberzug
    $SUDOAS rm -R ueberzug
  fi

  if ! [[ $RELEASE = Void || $RELEASE = Alpine || $RELEASE = Artix ]]; then
    [[ $RELEASE != Devuan ]] && $SUDOAS tee /etc/systemd/system/suspend@.service << EOF
[Unit]
Description=Lock X session using i3lock for user %i
Before=sleep.target
[Service]
User=%i
Type=forking
Environment=DISPLAY=:0
ExecStart=/usr/bin/xset dpms force suspend
ExecStartPre=/usr/bin/i3lock -c 000000
[Install]
WantedBy=sleep.target"
EOF

    [[ $RELEASE != Devuan ]] && $SUDOAS mkdir -p /etc/systemd/system/getty@tty1.service.d/
    [[ $RELEASE != Devuan ]] && $SUDOAS touch /etc/systemd/system/getty@tty1.service.d/override.conf
    [[ $RELEASE != Devuan ]] && $SUDOAS tee /etc/systemd/system/getty@tty1.service.d/override.conf << EOF
[Service]
ExecStart=
ExecStart=-/usr/sbin/agetty --autologin $USER --noclear %I \$TERM
EOF
  [[ $RELEASE != Devuan ]] && $SUDOAS systemctl enable suspend@$USER.service

    $SUDOAS touch /etc/sudoers.d/$USER
    echo "$USER ALL=(ALL) NOPASSWD: /usr/sbin/reboot,/usr/sbin/poweroff,/usr/bin/setleds" | $SUDOAS tee /etc/sudoers.d/$USER
  fi
}

CONFIGURE_PACKAGES

case "${RELEASE}" in
  Debian|Devuan|Fedora|AlmaLinux|Rocky|CentOS|Arch|Artix|Void|Alpine|openSUSE)
    ${UPPERCASE}_SETUP
    INSTALL_PACKAGES
    CONFIGURE_HOME
    CONFIGURE_SYSTEM ;;
  FreeBSD|OpenBSD)
    INSTALL_PACKAGES
    CONFIGURE_HOME
    ${UPPERCASE}_SETUP ;;
  NixOS)
    CONFIGURE_HOME
    NIXOS_SETUP ;;
esac

grep error install.error
