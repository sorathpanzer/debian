#!/usr/bin/env bash

# Version= 0.4.20

# TODO: Improvements in the script
# -> autologin in Devuan
# In OpenSuse there is no android-tools lf trash-cli light by default (problema cc ST terminal)
# MicrOS: git, stow, make (useradd -m, and visudo)
# In OpenBSD install qutebrowser separatily
# Flatpak in RHEL systems only install packages for AlmaLinux
# NixOS put setleds in sudoers

# TODO: Before running this script you must install:
# Debian -> curl
# Fedora -> audit
# NIXOS -> git, stow
# FreeBSD -> doas, curl bash >>>>>>>> "permit nopass keepenv" to doas.conf
# Void -> doas, curl >>>>>>>> "permit $USER persist as root" to doas.conf
# OpenBSD ->  curl bash
# Alpine -> curl, bash
# $PULSEAUDIOUTILS not installed by default problem with missing 64bit support

exec &> >(tee -a "install.log") 2>install.error

LVM_PASSWORD=""
GIT_USERNAME="${USER}panzer"
GIT_EMAIL="$GIT_USERNAME"
DOTFILES="https://gitea.com/sorathpanzer/dotgit.git"

CONFIGURE_PACKAGES()
{
RELEASE=$(cat /etc/os-release | grep ^NAME= | cut -d '=' -f2 | awk '{print $1}' | tr -d '"')
UPPERCASE=$(echo $RELEASE | tr '[:lower:]' '[:upper:]')

  NA=" "
# DISTRO=(        Debian/Devuan             Fedora                Alma/Rocky/Centos     Arch                Artix                Void                Alpine              OpenSuse                   FreeBSD              OpenBSD             )
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------)
  ADBLOCK=(       "$NA"                     "$NA"                 "$NA"                 "$NA"               "$NA"               python3-adblock     "$NA"               "$NA"                      py39-adblock         py3-adblock         )
  ANDROIDTOOLS=(  android-tools-adb         android-tools         "$NA"                 android-tools       "$NA"               android-tools       android-tools       "$NA"                      android-tools        "$NA"               )
  BTRFSPROGS=(    btrfs-progs               btrfs-progs           "$NA"                 btrfs-progs         btrfs-progs         btrfs-progs         btrfs-progs         btrfsprogs                 "$NA"                "$NA"               )
  CRONTABS=(      python3-crontab           crontabs              crontabs              "$NA"               "$NA"               "$NA"               "$NA"               python3-crontab            py39-python-crontab  "$NA"               )
  DBUSX11=(       dbus-x11                  dbus-x11              dbus-x11              dbus                dbus                dbus-x11            dbus-x11            dbus-1-x11                 dbus                 dbus                )
  DOAS=(          "$NA"                     opendoas              "$NA"                 opendoas            opendoas            opendoas            doas                opendoas                   doas                 "$NA"               )
  DUNST=(         dunst                     dunst                 "$NA"                 dunst               dunst               dunst               dunst               dunst                      dunst                dunst               )
  EMACSNX=(	      emacs-nox		              emacs-nox		          emacs-nox		          emacs-nox	          emacs-nox	          emacs		            emacs-nox	          emacs-nox		               emacs-nox	          emacs-nosx          )
  FEH=(           feh                       feh                   "$NA"                 feh                 feh                 feh                 feh                 feh                        feh                  feh                 )
  FFTHUMBNAILER=( ffmpegthumbnailer         ffmpegthumbnailer     "$NA"                 ffmpegthumbnailer   ffmpegthumbnailer   ffmpegthumbnailer   ffmpegthumbnailer   ffmpegthumbnailer          ffmpegthumbnailer    ffmpegthumbnailer   )
  FIREFOX=(       firefox-esr               firefox               firefox               firefox             firefox             firefox             firefox             MozillaFirefox             firefox-esr          firefox-esr         )
  FLATPAK=(       flatpak                   flatpak               "$NA"                 "$NA"               "$NA"               "$NA"               flatpak             "$NA"                      "$NA"                "$NA"               )
  FZF=(           fzf                       fzf                   "$NA"                 fzf                 fzf                 fzf                 fzf                 fzf                        fzf                  fzf                 )
  GCC=(           gcc                       gcc                   gcc                   gcc                 gcc                 gcc                 gcc                 gcc                         gcc                 gcc%11              )
  GIFLIB=(        libgif-dev                giflib-devel          giflib-devel          giflib              giflib              giflib-devel        giflib-dev          giflib-devel               giflib               giflib              )
  GRUBBY=(        "$NA"                     grubby                grubby                "$NA"               "$NA"               "$NA"               "$NA"               grubby                     "$NA"                "$NA"               )
  IMAGEMAGICK=(   imagemagick               ImageMagick           ImageMagick           imagemagick         imagemagick         ImageMagick         imagemagick         ImageMagick                ImageMagick7-nox11   ImageMagick         )
  IMLIB2=(        libimlib2-dev             imlib2-devel          imlib2-devel          imlib2              imlib2              imlib2-devel        imlib2-dev          imlib2-devel               imlib2               imlib2              )
  LF=(            "$NA"                     "$NA"                 "$NA"                 lf                  "$NA"               lf                  lf                  "$NA"                      lf                   lf                  )
  LIBEXIF=(       libexif-dev               libexif-devel         libexif-devel         libexif             libexif             libexif-devel       libexif-dev         libexif-devel              libexif              libexif             )
  LIBREOFFICE=(   libreoffice-calc          libreoffice-calc      libreoffice-calc      libreoffice-still   libreoffice-fresh   libreoffice-calc    "$NA"               libreoffice-calc           libreoffice          libreoffice         )
  LIBX11=(        libx11-dev                libX11-devel          libX11-devel          libx11              libx11              libX11-devel        libx11-dev          libX11-devel               libX11               "$NA"               )
  LIBXFT=(        libxft-dev                libXft-devel          libXft-devel          libxft              libxft              libXft-devel        libxft-dev          libXft-devel               libXft               "$NA"               )
  LIBXINERAMA=(   libxinerama-dev           libXinerama-devel     libXinerama-devel     libxinerama         libxinerama         libXinerama-devel   libxinerama-dev     libXinerama-devel          libXinerama          "$NA"               )
  LIGHT=(         light                     light                 "$NA"                 light               "$NA"               light               light               "$NA"                      "$NA"                "$NA"               )
  LMSENSORS=(     lm-sensors                lm_sensors            lm_sensors            lm_sensors          lm_sensors          lm_sensors          lm-sensors          sensors                    "$NA"                "$NA"               )
  NMTUI=(         "$NA"                     NetworkManager-tui    NetworkManager-tui    "$NA"               "$NA"               "$NA"               networkmanager-tui  "$NA"                      "$NA"                networkmanager-tui  )
  NTFS3G=(        ntfs-3g                   ntfs-3g               ntfs-3g               ntfs-3g             ntfs-3g             ntfs-3g             ntfs-3g             ntfs-3g                    fusefs-ntfs          ntfs_3g             )
  OVMF=(          ovmf                      edk2-ovmf             edk2-ovmf             edk2-ovmf           edk2-ovmf           "$NA"               ovmf                ovmf                       "$NA"                "$NA"               )
  PANDOCPDF=(     pandoc                    pandoc-pdf            pandoc-pdf            pandoc              pandoc              pandoc              "$NA"               pandoc                     "$NA"                pandoc              )
  PICOM=(         picom                     picom                 "$NA"                 picom               picom               picom               picom               picom                      picom                picom               )
  POPPLERUTILS=(  poppler-utils             poppler-utils         poppler               poppler             poppler             poppler-utils       poppler-utils       poppler-tools              poppler-utils        poppler-utils       )
  PAUTILS=(       pulseaudio-utils          pulseaudio-utils      pulseaudio-utils      "$NA"               "$NA"               pulseaudio-utils    pulseaudio-utils    pulseaudio-utils           "$NA"                pulseaudio          )
  PYTHON=(        "$NA"                     python3-devel         python3-devel         "$NA"               "$NA"               python3-devel       python3-dev         python3-devel              python311            python3             )
  PYTHON3PIP=(    python3-pip               python3-pip           python-pip            python-pip          python-pip          python3-pip         py3-pip             python3-pip                py39-pip             py3-pip             )
  PYTHON3SIX=(    python3-six               python3-six           python-six            python-six          python-six          python3-six         py3-six             python3-six                py39-six             py3-six             )
  QEMU=(          qemu                      qemu                  qemu-img              qemu-base           qemu-base           qemu                qemu-system-x86_64  qemu                       qemu                 qemu                )
  QUTEBROWSER=(   qutebrowser               qutebrowser           "$NA"                 qutebrowser         qutebrowser         qutebrowser         qutebrowser         qutebrowser                qutebrowser          qutebrowser         )
  SCROT=(         scrot                     scrot                 "$NA"                 scrot               scrot               scrot               scrot               scrot                      scrot                scrot               )
  SOX=(           sox                       sox                   sox                   sox                 sox                 sox                 sox                 sox                        sox                  sox                 )
  STOW=(          stow                      stow                  stow                  stow                "$NA"                stow                stow                stow                       stow                 stow                )
  TELEGRAM=(      telegram-desktop          telegram-desktop      "$NA"                 telegram-desktop    "$NA"    telegram-desktop    telegram-desktop    telegram-desktop           telegram-desktop     "$NA"               )
  TIG=(           tig                       tig                   tig                   tig                 "$NA"                 tig                 tig                 "$NA"                      tig                  tig                 )
  TRASHCLI=(      trash-cli                 trash-cli             "$NA"                 trash-cli           "$NA"           trash-cli           trash-cli           "$NA"                      "$NA"                "$NA"               )
  UEBERZUG=(      "$NA"                     "$NA"                 "$NA"                 "$NA"               "$NA"               ueberzug            "$NA"               "$NA"                      py39-ueberzug        "$NA"               )
  UDISKIE=(       udiskie                   udiskie               "$NA"                 udiskie             udiskie             udiskie             udiskie             udiskie                    "$NA"                "$NA"               )
  XDOTOOL=(       xdotool                   xdotool               xdotool               xdotool             xdotool             xdotool             xdotool             xdotool                    xdotool              xdotool             )
  XF86INTEL=(     xserver-xorg-video-intel  xorg-x11-drv-intel    "$NA"                 xf86-video-intel    xf86-video-intel    xf86-video-intel    xf86-video-intel    xf86-video-intel           xf86-video-intel     "$NA"               )
  XINIT=(         xinit                     xorg-x11-xinit        xorg-x11-xinit        xorg-xinit          xorg-xinit          xinit               xinit               xinit                      xinit                "$NA"               )
  XINPUT=(        xinput                    xinput                xinput                xorg-xinput         xorg-xinput         xinput              xinput              xinput                     xinput               "$NA"               )
  XORGSERVER=(    xserver-xorg              xorg-x11-server-Xorg  xorg-x11-server-Xorg  xorg-server         xorg-server         xorg-minimal        xorg-server         xorg-x11-server            xorg-minimal         "$NA"               )
  XRANDR=(        x11-xserver-utils         xrandr                xrandr                xorg-xrandr         xorg-xrandr         xrandr              xrandr              xrandr                     xrandr               "$NA"               )
  XRDB=(          x11-xserver-utils         xrdb                  xrdb                  xorg-xrdb           xorg-xrdb           xrdb                xrdb                xrdb                       xrdb                 "$NA"               )
  XSET=(          x11-xserver-utils         xset                  xset                  xorg-xset           xorg-xset           xset                xset                xset                       xset                 "$NA"               )
  YOUTUBEDL=(     youtube-dl                youtube-dl            youtube-dl            youtube-dl          youtube-dl          youtube-dl          youtube-dl          youtube-dl                 youtube_dl           youtube-dl          )
  ZATHURA=(       zathura                   zathura               zathura               zathura             zathura             zathura             zathura             zathura                    zathura              zathura             )
  ZATHURAPDF=(    zathura-pdf-poppler       zathura-pdf-poppler   zathura-pdf-poppler   zathura-pdf-poppler "$NA"               zathura-pdf-poppler zathura-pdf-poppler zathura-plugin-pdf-poppler zathura-pdf-poppler  zathura-pdf-poppler )

  case "${RELEASE}" in
    "")                  echo "$RELEASE is not supported!"; exit 1 ;;
    Debian|Devuan)	POS="0"
      PKGINSTALL="sudo apt-get -y install" ;;
    Fedora)               POS="1"
      PKGINSTALL="sudo rpm-ostree install" ;;
    AlmaLinux|Rocky|CentOS)  POS="2"
      PKGINSTALL="sudo dnf install -y" ;;
    Arch)               POS="3"
      PKGINSTALL="sudo pacman --noconfirm -Syu" ;;
    Artix)               POS="4"
      PKGINSTALL="sudo pacman --noconfirm -Syu" ;;
    Void)               POS="5"
      PKGINSTALL="doas xbps-install -Sy" ;;
    Alpine)             POS="6"
      PKGINSTALL="doas apk add" ;;
    openSUSE)           POS="7"
      PKGINSTALL="sudo zypper install -y" ;;
    FreeBSD)            POS="8"
      PKGINSTALL="doas pkg install -y" ;;
    OpenBSD)            POS="9"
      PKGINSTALL="doas pkg_add -i" ;;
  esac

  if [ $RELEASE = Void ] || [ $RELEASE = Alpine ] || [ $RELEASE = FreeBSD ] || [ $RELEASE = OpenBSD ]; then
    SUDOAS="doas"
  else
    SUDOAS="sudo"
  fi

  if [ $RELEASE = Alpine ]; then
    mkdir -p /etc/doas.d
    DOASCONF="/etc/doas.d/doas.conf"
  else
    DOASCONF="/etc/doas.conf"
  fi

  if [ $RELEASE = Void ] || [ $RELEASE = Alpine ]; then
    echo "permit persist $USER as root
  permit nopass $USER as root cmd wg-quick
  permit nopass $USER cmd wg
  permit nopass $USER cmd reboot
  permit nopass $USER cmd poweroff
  permit nopass $USER cmd mount
  permit nopass $USER cmd setleds
  permit nopass $USER cmd rc-service
  permit nopass $USER cmd apk" | $SUDOAS tee $DOASCONF
  fi
}

FEDORA_SETUP()
{
    [ ! -x "$(command -v rpm-ostree)" ] && echo "max_parallel_downloads=10
    deltarpm=True
    defaultyes=True" | $SUDOAS tee -a /etc/dnf/dnf.conf

    echo "Defaults:$USER timestamp_timeout=60" | $SUDOAS tee /etc/sudoers.d/$USER
    [ -x "$(command -v rpm-ostree)" ] && $SUDOAS rpm-ostree override remove zezere-ignition ignition dbus-parsec
    $PKGINSTALL https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
    [ -x "$(command -v rpm-ostree)" ] && $SUDOAS rpm-ostree ex apply-live --allow-replacement
    [ -x "$(command -v rpm-ostree)" ] && $SUDOAS sed -i 's/none/stage/g' /etc/rpm-ostreed.conf
    $SUDOAS sed -i '2s/\/bin\/bash/\/usr\/bin\/zsh/g' /etc/passwd
    [ -x "$(command -v rpm-ostree)" ] && $SUDOAS systemctl enable rpm-ostreed-automatic.timer

    echo '[updates-archive]
name=Fedora $releasever - $basearch - Updates Archive
baseurl=https://fedoraproject-updates-archive.fedoraproject.org/fedora/$releasever/$basearch/
enabled=AUTO_VALUE
metadata_expire=6h
repo_gpgcheck=0
type=rpm
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
skip_if_unavailable=True
cost=10000 # default is 1000' | $SUDOAS tee /etc/yum.repos.d/fedora-updates-archive.repo

$SUDOAS sed -i 's/#Auto/Auto/g' /etc/rpm-ostreed.conf
$SUDOAS systemctl enable rpm-ostreed-automatic.timer --now
}

ALMALINUX_SETUP()
{
 echo "Defaults:$USER timestamp_timeout=60" | $SUDOAS tee /etc/sudoers.d/$USER
 $SUDOAS dnf update -y
 $SUDOAS dnf install -y epel-release
 $SUDOAS dnf install -y --nogpgcheck https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$(rpm -E %rhel).noarch.rpm
 $SUDOAS dnf config-manager --set-enabled crb
 $SUDOAS dnf install -y tar

 sh <(curl -L https://nixos.org/nix/install) --no-daemon
 sed -i 's/nixpkgs-unstable/nixos-22.11/g' .nix-channels
 . $HOME/.nix-profile/etc/profile.d/nix.sh

 nix-channel --update
 nix-env -iA nixpkgs.nix nixpkgs.cacert
 nix-env -iA nixpkgs.android-tools nixpkgs.ffmpegthumbnailer nixpkgs.fzf nixpkgs.scrot nixpkgs.btrfs-progs nixpkgs.dunst nixpkgs.feh \
   nixpkgs.trash-cli nixpkgs.qutebrowser nixpkgs.transmission-gtk nixpkgs.signal-desktop nixpkgs.tdesktop nixpkgs.light \
   nixpkgs.picom nixpkgs.udiskie nixpkgs.python310Packages.adblock nixpkgs.ueberzug
 . $HOME/.nix-profile/etc/profile.d/nix.sh

 echo "max_parallel_downloads=10
 deltarpm=True
 defaultyes=True" | $SUDOAS tee -a /etc/dnf/dnf.conf
 $SUDOAS grubby --update-kernel=ALL --args=quiet
}

ROCKY_SETUP()
{
  ALMALINUX_SETUP
}

CENTOS_SETUP()
{
  ALMALINUX_SETUP
}

FREEBSD_SETUP()
{
  $SUDOAS pkg install -y ncurses dsbmd fusefs-lkl portmaster nsxiv
  $SUDOAS sysrc dbus_enable=YES
  $SUDOAS sysrc openntpd_enable=YES
  $SUDOAS sysrc hald_enable=YES
  $SUDOAS sysrc moused_enable=YES
  $SUDOAS sysrc linux_enable=YES
  echo "kern.evdev.rcpt_mask=3" | $SUDOAS tee -a /etc/sysctl.conf
  cp .config/suckless/dwm-6.4/config.bsd .config/suckless/dwm-6.4/config.mk
  cp .config/suckless/dmenu-5.2/config.bsd .config/suckless/dmenu-5.2/config.mk
  cp .config/suckless/st-0.9/config.bsd .config/suckless/st-0.9/config.mk
  cd $HOME/.config/suckless/dwm-6.4; $SUDOAS make install clean
  cd $HOME/.config/suckless/dmenu-5.2; $SUDOAS make install clean
  cd $HOME/.config/suckless/st-0.9; $SUDOAS make install clean
  cd $HOME/.config/suckless/dwmblocks; cp Makefile.bsd Makefile; $SUDOAS make install clean
  #cd $HOME/.config/suckless/sxiv; $SUDOAS make install clean
  cd $HOME
  $SUDOAS mkdir -p /usr/share/edk2/ovmf
  $SUDOAS cp .config/suckless/ovmf/OVMF_CODE.fd /usr/share/edk2/ovmf
}

OPENBSD_SETUP()
{
  #doas pkg_add -i gcc%11 keepassxc-- rsync-- unzip-- w3m--
  cp .config/suckless/dwm-6.3/config.bsd .config/suckless/dwm-6.3/config.mk
  cp .config/suckless/dmenu-5.1/config.bsd .config/suckless/dmenu-5.1/config.mk
  cp .config/suckless/st-0.8.5/config.bsd .config/suckless/st-0.8.5/config.mk
  cd $HOME/.config/suckless/dwm-6.3; doas make clean install
  cd $HOME/.config/suckless/dmenu-5.1; doas make clean install
  cd $HOME/.config/suckless/st-0.8.5; doas make clean install
  cd $HOME/.config/suckless/dwmblocks; cp Makefile.bsd Makefile; doas make clean install
  cd $HOME/.config/suckless/sxiv; doas make clean install
  cd $HOME
}

NIXOS_SETUP()
{
  mkdir .config
  curl -L https://raw.githubusercontent.com/sorathpanzer/nixos/main/configuration.nix > configuration.nix
  sed -i s/luks-/$(lsblk -l | grep luks | awk '{print $1}')/g configuration.nix
  cp .config/suckless/dwm-6.4/config.nixos .config/suckless/dwm-6.4/config.mk
  cp .config/suckless/dmenu-5.2/config.nixos .config/suckless/dmenu-5.2/config.mk
  cp .config/suckless/st-0.9/config.nixos .config/suckless/st-0.9/config.mk
  $SUDOAS mv configuration.nix /etc/nixos
  $SUDOAS nixos-rebuild boot
}

VOID_SETUP()
{
  $SUDOAS xbps-install -Syu
  $SUDOAS xbps-install -Sy make pkg-config snapper opendoas setxkbmap pulseaudio xdg-utils

  $SUDOAS snapper -c root create-config /
  $SUDOAS btrfs subvolume delete /.snapshots
  $SUDOAS mkdir /.snapshots
  $SUDOAS sed -i '/@snapshots/s/^#//' /etc/fstab

  echo "GETTY_ARGS=\"--autologin $USER --noclear\"
BAUD_RATE=38400
TERM_NAME=linux" | $SUDOAS tee /etc/sv/agetty-tty1/conf

$SUDOAS ln -s /etc/sv/pipewire /var/service
$SUDOAS ln -s /etc/sv/acpid /var/service
$SUDOAS xbps-remove -y sudo base-system
}

DEBIAN_SETUP()
{
  $SUDOAS apt update; $SUDOAS apt upgrade -y
  $SUDOAS apt install -y pulseaudio pulsemixer man2html
  systemctl --user --now enable pulseaudio
  systemctl --user --now enable pipewire.service pipewire-pulse
}

DEVUAN_SETUP()
{
  DEBIAN_SETUP
}

ARCH_SETUP()
{
  echo "Installing..."
}

ARTIX_SETUP()
{
 sh <(curl -L https://nixos.org/nix/install) --no-daemon
 sed -i 's/nixpkgs-unstable/nixos-22.11/g' .nix-channels
 . $HOME/.nix-profile/etc/profile.d/nix.sh

 nix-channel --update
 nix-env -iA nixpkgs.nix nixpkgs.cacert
 nix-env -iA nixpkgs.android-tools nixpkgs.trash-cli nixpkgs.tdesktop nixpkgs.light nixpkgs.lf nixpkgs.stow nixpkgs.tig
 . $HOME/.nix-profile/etc/profile.d/nix.sh
}

ALPINE_SETUP()
{
  echo "" | $SUDOAS tee /etc/motd

  echo "http://dl-cdn.alpinelinux.org/alpine/latest-stable/main
http://dl-cdn.alpinelinux.org/alpine/latest-stable/community" | $SUDOAS tee /etc/apk/repositories

  echo '#!/bin/sh

echo performance > /sys/devices/system/cpu/cpufreq/policy0/scaling_governor' | $SUDOAS tee /etc/local.d/cpufreq.start
$SUDOAS chmod +x /etc/local.d/cpufreq.start

  $SUDOAS adduser $USER input
  $SUDOAS apk -U upgrade
  $SUDOAS apk add lsblk make musl-dev ncurses xorg-server-common xorg-server-dev xproto xorgxrdp xorgxrdp-dev setxkbmap zzz ttf-dejavu \
    mesa-dri-gallium libva-intel-driver alsa-utils alsa-utils-doc alsa-lib alsaconf alsa-ucm-conf pulseaudio pulseaudio-alsa alsa-plugins-pulse \
    util-linux elogind polkit-elogind qemu-img qemu-ui-sdl qemu-hw-display-virtio-vga-gl libvirt-qemu qemu-hw-display-virtio-vga coreutils iwd networkmanager-wifi
  $SUDOAS rc-service dbus start; $SUDOAS rc-update add dbus
  $SUDOAS rc-service alsa start; $SUDOAS rc-update add alsa
  $SUDOAS rc-service local start; $SUDOAS rc-update add local default
  $SUDOAS rc-service elogind start; $SUDOAS rc-update add elogind
  $SUDOAS rc-update del networking boot
  $SUDOAS rc-update del wpa_supplicant boot
  $SUDOAS rc-update add iwd boot
  $SUDOAS rc-update add networkmanager boot
  $SUDOAS sed -i 's/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=0/g' /etc/default/grub
  $SUDOAS sed -i 's/#rc_parallel=\"NO\"/rc_parallel=\"YES\"/g' /etc/rc.conf
  $SUDOAS sed -i 's/root:\/bin\/ash/root:\/sbin\/nologin/g' /etc/passwd
  $SUDOAS sed -i "s/sbin\/getty 38400 tty1/bin\/login -f $USER/g" /etc/inittab
  $SUDOAS grub-mkconfig -o /boot/grub/grub.cfg

  $SUDOAS setup-xorg-base
  $SUDOAS rm -r /media/${cdrom,usb}
  $SUDOAS mkdir -p /media/Vault

  $SUDOAS mkdir /etc/udhcpc
  echo 'RESOLV_CONF="no"' | $SUDOAS tee /etc/udhcpc/udhcpc.conf

  echo "nameserver 84.200.69.80
nameserver 84.200.70.40" | $SUDOAS tee /etc/resolv.conf

  $SUDOAS mkdir -p /usr/share/edk2/ovmf
  $SUDOAS cp .config/suckless/ovmf/OVMF_CODE.fd /usr/share/edk2/ovmf

  echo "dns=none

  [device]
  wifi.backend=iwd" | sudo tee -a /etc/NetworkManager/NetworkManager.conf

  echo " " | sudo tee /etc/network/interfaces
}

OPENSUSE_SETUP()
{
  echo "Defaults:$USER timestamp_timeout=60" | $SUDOAS tee /etc/sudoers.d/$USER
  $SUDOAS touch /.root.key
  $SUDOAS chmod 600 /.root.key
  $SUDOAS dd if=/dev/urandom of=/.root.key bs=1024 count=1
	echo "ENTER THE PASSPHRASE OF THE DEVICE"
  $SUDOAS cryptsetup luksAddKey /dev/nvme0n1p2 /.root.key
  $SUDOAS sed -i 's/none/\/.root.key/g' /etc/crypttab
  echo -e 'install_items+=" /.root.key "' | $SUDOAS tee --append /etc/dracut.conf.d/99-root-key.conf > /dev/null
  echo "/boot/ root:root 700" | $SUDOAS tee -a /etc/permissions.local
  $SUDOAS chkstat --system --set
  $SUDOAS dracut -f
  $SUDOAS sed -i 's/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=0/g' /etc/default/grub
  $SUDOAS grub2-mkconfig -o /boot/grub2/grub.cfg

  $PKGINSTALL make ncurses-devel posix_cc

  TUMBLEWEED=$(cat /etc/os-release | grep ^NAME= | cut -d '=' -f2 | awk '{print $2}' | tr -d '"')
  if [ $TUMBLEWEED = Tumbleweed ]; then
    $SUDOAS zypper install -y android-tools
  fi
}

INSTALL_PACKAGES()
{
  $PKGINSTALL ffmpeg gcc git groff i3lock keepassxc neovim mpv pipewire rsync syncthing unzip usbutils w3m wireguard-tools xclip xdg-user-dirs zsh ripgrep \
    ${ADBLOCK[$POS]} ${ANDROIDTOOLS[$POS]} ${BTRFSPROGS[$POS]} ${CRONTABS[$POS]} ${DBUSX11[$POS]} ${DUNST[$POS]} ${FEH[$POS]} ${FFTHUMBNAILER[$POS]} ${FIREFOX[$POS]} \
    ${FLATPAK[$POS]} ${FZF[$POS]} ${GIFLIB[$POS]} ${GRUBBY[$POS]} ${IMAGEMAGICK[$POS]} ${LIBXFT[$POS]} ${IMLIB2[$POS]} ${LIBREOFFICE[$POS]} ${LF[$POS]} \
    ${LIGHT[$POS]} ${LIBEXIF[$POS]} ${LIBX11[$POS]} ${LIBXINERAMA[$POS]} ${LMSENSORS[$POS]} ${NTFS3G[$POS]} ${PANDOCPDF[$POS]} ${PICOM[$POS]} ${POPPLERUTILS[$POS]} \
    ${PAUTILS[$POS]} ${PYTHON[$POS]} ${PYTHON3PIP[$POS]} ${PYTHON3SIX[$POS]} ${QEMU[$POS]} ${SCROT[$POS]} ${SOX[$POS]} ${STOW[$POS]} ${TIG[$POS]} ${TRASHCLI[$POS]} \
    ${TELEGRAM[$POS]} ${UDISKIE[$POS]} ${UEBERZUG[$POS]} ${XDOTOOL[$POS]} ${XINPUT[$POS]} ${XF86INTEL[$POS]} ${XORGSERVER[$POS]} ${XINIT[$POS]} ${XRANDR[$POS]} \
    ${XRDB[$POS]} ${XSET[$POS]} ${YOUTUBEDL[$POS]} ${ZATHURA[$POS]} ${ZATHURAPDF[$POS]} ${OVMF[$POS]} ${NMTUI[$POS]} ${QUTEBROWSER[$POS]} ${EMACSNX[$POS]}

  [ -x "$(command -v rpm-ostree)" ] && $SUDOAS rpm-ostree ex apply-live --allow-replacement

  if [ $RELEASE != NixOS ] | [ $RELEASE != "FreeBSD" ]; then
    $SUDOAS flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    $SUDOAS flatpak install org.signal.Signal -y
    [ $RELEASE = "AlmaLinux" ] && $SUDOAS flatpak install org.qutebrowser.qutebrowser org.telegram.desktop -y
    [ $RELEASE = "Alpine" ] && $SUDOAS flatpak install org.libreoffice.LibreOffice -y
  fi


if [ $RELEASE = Fedora ] || [ $RELEASE = openSUSE ]; then
    $SUDOAS grubby --update-kernel=ALL --args=quiet
fi

if [ $RELEASE = Alpine ]; then
  $SUDOAS adduser $USER plugdev
  $SUDOAS adduser $USER qemu
  $SUDOAS adduser $USER kvm
  $SUDOAS adduser $USER libvirt
fi
}

  CONFIGURE_HOME()
  {
  [ -e .profile ] && rm .profile
  mkdir -p /home/$USER/{Transferências,Documentos,Música,Imagens/Screenshots,Vídeos,.config,.cache/{lf,transmission}}
  mkdir -p /home/$USER/.local/share/{backgrounds,gvfs-metadata,icc,keyrings,nvim,sounds,Trash,xorg}
  touch /home/$USER/.local/recently-used.xbel
  git config --global user.name "$GIT_USERNAME"
  git config --global user.email "$GIT_EMAIL"
  echo "Cloning my dotfiles..."
  git clone $DOTFILES /home/$USER/.config/dotgit
  git config --global credential.helper store
  mkdir -p /home/$USER/.cache/zsh
  touch /home/$USER/.cache/zsh/history
  sh -c "cd /home/$USER/.config/dotgit; stow -vt ~ dotfiles"

  if [ $RELEASE != NixOS ]; then
    if [ $RELEASE != Void ]; then
      pip install --user adblock
      pip install --user ueberzug
    fi

    cp $HOME/.config/suckless/dwm-6.4/config.tux $HOME/.config/suckless/dwm-6.4/config.mk
    cd $HOME/.config/suckless/dwm-6.4; make install clean
    cp $HOME/.config/suckless/dmenu-5.2/config.tux $HOME/.config/suckless/dmenu-5.2/config.mk
    cd $HOME/.config/suckless/dmenu-5.2; make install clean
    cp $HOME/.config/suckless/st-0.9/config.tux $HOME/.config/suckless/st-0.9/config.mk

    if [ $RELEASE = OpenSUSE ]; then
      $SUDOAS sed -i 's/#CC/CC/g' ~/.config/suckless/st-0.9/config.mk
    fi

    cd $HOME/.config/suckless/st-0.9; make install clean
    cd $HOME/.config/suckless/dwmblocks; make install clean
    cd $HOME/.config/suckless/sxiv; make install clean
    cd
  fi

  if [ $RELEASE != FreeBSD ]; then
    NVME=$(lsblk -l | grep sda | head -n 1 | awk '{print $1}')
    SDA=$(lsblk -l | grep sda | head -n 1 | awk '{print $1}')

    if [ ! -z $LVM_PASSWORD ]; then
      echo "Open vault password:"
      mkdir Vault
      echo -n "$LVM_PASSWORD" | $SUDOAS cryptsetup open --type luks /dev/sda1 Vault
      $SUDOAS mount /dev/mapper/Vault Vault
      rsync -avrop Vault/Documentos/BackHome/ /home/$USER
      #$SUDOAS cp $HOME/Documentos/wg0.conf /etc/wireguard
    fi
  fi

  if [ $RELEASE = Void ]; then
    $SUDOAS mkdir -p /usr/share/edk2/ovmf
    $SUDOAS cp .config/suckless/ovmf/OVMF_CODE.fd /usr/share/edk2/ovmf
  fi

  git clone --depth 1 https://github.com/wbthomason/packer.nvim\
 ~/.local/share/nvim/site/pack/packer/start/packer.nvim
  }

  CONFIGURE_SYSTEM()
  {
  $SUDOAS usermod -s /bin/zsh $USER
  echo "$USER" | $SUDOAS tee -a /etc/shutdown.allow
  echo "blacklist ideapad_laptop" | $SUDOAS tee /etc/modprobe.d/blacklist.conf

  $SUDOAS mkdir /etc/X11/xorg.conf.d
  echo 'Section "Device"
  Identifier "Intel Graphics"
  Driver "intel"
  Option "TearFree" "true"
  Option "DRI" "False"
  EndSection' | $SUDOAS tee /etc/X11/xorg.conf.d/20-intel.conf

  $SUDOAS mkdir -p /etc/polkit-1/rules.d/
  echo '/* Allow members of the wheel group to execute any actions
  * without password authentication, similar to "sudo NOPASSWD:"
  */
  polkit.addRule(function(action, subject) {
    if (subject.isInGroup("wheel")) {
      return polkit.Result.YES;
    }
  });' | $SUDOAS tee /etc/polkit-1/rules.d/49-nopasswd_global.rules

  if [ $RELEASE != Void ] | [ $RELEASE != Alpine ]; then

    echo "[Unit]
  Description=Lock X session using i3lock for user %i
  Before=sleep.target
  [Service]
  User=%i
  Type=forking
  Environment=DISPLAY=:0
  ExecStart=/usr/bin/xset dpms force suspend
  ExecStartPre=/usr/bin/i3lock -c 000000
  [Install]
  WantedBy=sleep.target" | $SUDOAS tee /etc/systemd/system/suspend@.service

    $SUDOAS mkdir -p /etc/systemd/system/getty@tty1.service.d/
    $SUDOAS touch /etc/systemd/system/getty@tty1.service.d/override.conf
    echo '[Service]
  ExecStart=
  ExecStart=-/usr/sbin/agetty --autologin sorath --noclear %I $TERM' | $SUDOAS tee /etc/systemd/system/getty@tty1.service.d/override.conf

    $SUDOAS systemctl enable suspend@$USER.service
    $SUDOAS touch /etc/sudoers.d/$USER
    echo "$USER ALL=(ALL) NOPASSWD: /usr/bin/wg-quick,/usr/bin/wg,/usr/bin/ostree,/usr/sbin/reboot,/usr/sbin/poweroff,/usr/bin/setleds" | $SUDOAS tee /etc/sudoers.d/$USER
  fi
  }

CONFIGURE_PACKAGES

case "${RELEASE}" in
  Debian|Devuan|Fedora|AlmaLinux|Rocky|CentOS|Arch|Artix|Void|Alpine|openSUSE)
    ${UPPERCASE}_SETUP
    INSTALL_PACKAGES
    CONFIGURE_HOME
    CONFIGURE_SYSTEM ;;
  FreeBSD|OpenBSD)
    INSTALL_PACKAGES
    CONFIGURE_HOME
    $UPPERCASE_SETUP ;;
  NixOS)
    CONFIGURE_HOME
    NIXOS_SETUP ;;
esac

cat install.error | grep error
