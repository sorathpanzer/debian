#!/usr/bin/env bash

# Version= 0.2.63

# Fedora - Install audit
# NIXOS - Install git and stow
# FreeBSD - Install doas, curl and bash >>>>>>>> permit nopass keepenv
# $PULSEAUDIOUTILS not installed by default problem with missing 64bit support

exec &> >(tee -a "install.log") 2>install.error

USERNAME=""
LVM_PASSWORD=""
GIT_USERNAME="${USERNAME}panzer"
GIT_EMAIL="$GIT_USERNAME"

RELEASE=$(cat /etc/os-release | grep ^ID= | cut -d '=' -f2 | tr -d '"')

if [[ $RELEASE = fedora && -f /usr/bin/dnf ]]; then
  OS="$RELEASE"
  SUDO="sudo"
  PKGINSTALL="$SUDO dnf install -y"
fi

if [[ $RELEASE = fedora && -f /usr/bin/ostree ]]; then
  OS="FedoraIOT"
  SUDO="sudo"
  PKGINSTALL="$SUDO rpm-ostree install"
  echo "Defaults:$USERNAME timestamp_timeout=30" | $SUDO tee /etc/sudoers.d/sorath
fi

if [[ $RELEASE = almalinux ]]; then
  OS="rhel"
  SUDO="sudo"
  PKGINSTALL="$SUDO dnf install -y"
fi

if [[ $RELEASE = freebsd ]]; then
  OS="freebsd"
  SUDO="doas"
  PKGINSTALL="$SUDO pkg install -y"
  $SUDO pkg install curl
fi

CONFIGURE_PACKAGES()
{

#   DISTRO="
# 1.Debian/Ubuntu
# 2.Fedora/IOT
# 3.Rhel like systems
# 4.Arch linux
# 5.Void Linux
# 6.Alpine Linux
# 7.OpenSuse Linux
# 8.FreeBSD"

  ADBLOCK=(
:\
:\
:\
:\
:\
:\
:\
py39-adblock)

  ANDROIDTOOLS=(
android-tools-adb:\
android-tools:\
:\
android-tools:\
android-tools:\
android-tools:\
android-tools:\
android-tools)

  BTRFSPROGS=(
btrfs-progs:\
btrfs-progs:\
:\
btrfs-progs:\
btrfs-progs:\
btrfs-progs:\
btrfsprogs:\
)

  CRONTABS=(
python3-crontab:\
crontabs:\
crontabs:\
:\
:\
:\
crontabs:\
py39-python-crontab)

  DBUSX11=(
dbus-x11:\
dbus-x11:\
dbus-x11:\
dbus:\
dbus-x11:\
dbus-x11:\
dbus-x11:\
dbus)

  DUNST=(
dunst:\
dunst:\
:\
dunst:\
dunst:\
dunst:\
dunst:\
dunst)

  FEH=(
feh:\
feh:\
:\
feh:\
feh:\
feh:\
feh:\
feh)

  FFMPEGTHUMBNAILER=(
ffmpegthumbnailer:\
ffmpegthumbnailer:\
:\
ffmpegthumbnailer:\
ffmpegthumbnailer:\
ffmpegthumbnailer:\
FFmpegThumbnailer:\
ffmpegthumbnailer)

  FLATPAK=(
:\
flatpak:\
:\
:\
:\
:\
:\
)

  FZF=(
fzf:\
fzf:\
:\
fzf:\
fzf:\
fzf:\
fzf:\
fzf)

  GIFLIB=(
giflib-devel:\
giflib-devel:\
giflib-devel:\
giflib-devel:\
giflib-devel:\
giflib-devel:\
giflib-devel:\
giflib)

  GRUBBY=(
grubby:\
grubby:\
grubby:\
grubby:\
grubby:\
grubby:\
grubby:\
)

  IMAGEMAGICK=(
imagemagick:\
ImageMagick:\
ImageMagick:\
imagemagick:\
ImageMagick:\
imagemagick:\
ImageMagick:\
ImageMagick7-nox11)

  IMLIB2=(
imlib2-devel:\
imlib2-devel:\
imlib2-devel:\
imlib2-devel:\
imlib2-devel:\
imlib2-devel:\
:\
imlib2)

  LF=(
lf:\
:\
:\
lf:\
lf:\
lf:\
lf:\
lf)

  LIBEXIF=(
libexif-devel:\
libexif-devel:\
libexif-devel:\
libexif-devel:\
libexif-devel:\
libexif-devel:\
libexif-devel:\
libexif)

  LIBREOFFICE=(
libreoffice-calc:\
libreoffice-calc:\
libreoffice-calc:\
libreoffice-calc:\
libreoffice-calc:\
libreoffice-calc:\
libreoffice-calc:\
libreoffice)

  LIBREOFFICEPT=(
libreoffice-langpack-pt-PT:\
libreoffice-langpack-pt-PT:\
libreoffice-langpack-pt-PT:\
libreoffice-langpack-pt-PT:\
libreoffice-langpack-pt-PT:\
libreoffice-langpack-pt-PT:\
libreoffice-langpack-pt-PT:\
pt-libreoffice)

  LIBX11=(
libX11-devel:\
libX11-devel:\
libX11-devel:\
libX11-devel:\
libX11-devel:\
libX11-devel:\
libX11-devel:\
libX11)

  LIBXFT=(
libxft2:\
libXft-devel:\
libXft-devel:\
libxft:\
libXft:\
libxft:\
libXft:\
libXft)

  LIBXINERAMA=(
libXinerama-devel:\
libXinerama-devel:\
libXinerama-devel:\
libXinerama-devel:\
libXinerama-devel:\
libXinerama-devel:\
libXinerama-devel:\
libXinerama)

  LIGHT=(
light:\
light:\
:\
light:\
light:\
light:\
light:\
)

  LMSENSORS=(
lm-sensors:\
lm_sensors:\
lm_sensors:\
lm_sensors:\
lm_sensors:\
lm-sensors:\
lm_sensors:\
)

  NTFS3G=(
ntfs-3g:\
ntfs-3g:\
ntfs-3g:\
ntfs-3g:\
ntfs-3g:\
ntfs-3g:\
ntfs-3g:\
fusefs-ntfs)

  PANDOCPDF=(
pandoc-pdf:\
pandoc-pdf:\
:\
pandoc:\
pandoc:\
pandoc:\
pandoc:\
)

  PICOM=(
picom:\
picom:\
:\
picom:\
picom:\
picom:\
picom:\
picom)

  POPPLERUTILS=(
poppler-utils:\
poppler-utils:\
poppler:\
poppler-utils:\
poppler-utils:\
poppler-utils:\
poppler-utils:\
poppler-utils)

  PULSEAUDIOUTILS=(
pulseaudio-utils:\
pulseaudio-utils:\
pulseaudio-utils:\
pulseaudio:\
pulseaudio-utils:\
pulseaudio-utils:\
pulseaudio-utils:\
)

  PYTHON=(
:\
python3-devel:\
python3-devel:\
:\
:\
:\
:\
python311)

  PYTHON3PIP=(
python3-pip:\
python3-pip:\
python-pip:\
python-pip:\
py3-pip:\
python3-pip:\
python3-pip:\
py39-pip)

  PYTHON3SIX=(
python3-six:\
python3-six:\
python-six:\
python-six:\
py3-six:\
python3-six:\
python3-six:\
py39-six)

  QEMU=(
qemu:\
qemu:\
qemu-img:\
qemu-base:\
qemu:\
qemu:\
qemu:\
qemu)

  SCROT=(
scrot:\
scrot:\
:\
scrot:\
scrot:\
scrot:\
scrot:\
scrot)

  SOX=(
sox:\
sox:\
:\
sox:\
sox:\
sox:\
sox:\
sox)

  STOW=(
stow:\
stow:\
:\
stow:\
stow:\
stow:\
stow:\
stow)

  TELEGRAM=(
telegram-desktop:\
telegram-desktop:\
:\
telegram-desktop:\
telegram-desktop:\
telegram-desktop:\
telegram-desktop:\
telegram-desktop)

  TIG=(
tig:\
tig:\
tig:\
tig:\
tig:\
tig:\
:\
tig)

  TRASHCLI=(
trash-cli:\
trash-cli:\
:\
trash-cli:\
trash-cli:\
trash-cli:\
trash-cli:\
)

  UEBERZUG=(
:\
:\
:\
:\
:\
:\
:\
py39-ueberzug)

  UDISKIE=(
udiskie:\
udiskie:\
:\
udiskie:\
udiskie:\
udiskie:\
udiskie:\
)

  XDOTOOL=(
xdotool:\
xdotool:\
:\
xdotool:\
xdotool:\
xdotool:\
xdotool:\
xdotool)

  XF86VIDEOINTEL=(
xserver-xorg-video-intel:\
xorg-x11-drv-intel:\
:\
xf86-video-intel:\
xf86-video-intel:\
xf86-video-intel:\
xf86-video-intel:\
xf86-video-intel)

  XINIT=(
xinit:\
xorg-x11-xinit:\
xorg-x11-xinit:\
xinit:\
xinit:\
xinit:\
xinit:\
xinit)

  XINPUT=(
xinput:\
xinput:\
xinput:\
xorg-xinput:\
xinput:\
xinput:\
xinput:\
xinput)

  XORGSERVER=(
xserver-xorg:\
xorg-x11-server-Xorg:\
xorg-x11-server-Xorg:\
xorg-server:\
xorg-minimal:\
xorg-server:\
xorg-server:\
xorg-minimal)

  XRANDR=(
x11-xserver-utils:\
xrandr:\
xrandr:\
xorg-xrandr:\
xrandr:\
xrandr:\
xrandr:\
xrandr)

  XRDB=(
x11-xserver-utils:\
xrdb:\
xrdb:\
xorg-xrdb:\
xrdb:\
xrdb:\
xrdb:\
xrdb)

  XSET=(
x11-xserver-utils:\
xset:\
xset:\
xorg-xset:\
xset:\
xset:\
xset:\
xset)

  YOUTUBEDL=(
youtube-dl:\
youtube-dl:\
youtube-dl:\
youtube-dl:\
youtube-dl:\
youtube-dl:\
youtube-dl:\
youtube_dl)

  ZATHURA=(
zathura:\
zathura:\
:\
zathura:\
zathura:\
zathura:\
zathura:\
zathura)

  ZATHURAPDF=(
zathura-pdf-poppler:\
zathura-pdf-poppler:\
:\
zathura-pdf-poppler:\
zathura-pdf-poppler:\
zathura-pdf-poppler:\
Zathura-PDF-Poppler:\
zathura-pdf-poppler)

  case "${OS}" in
    "")                 echo "No option was specified."; exit 1 ;;
    debian|ubuntu)	    POS="1" ;;
    fedora|FedoraIOT)   POS="2" ;;
    rhel)               POS="3" ;;
    Arch)               POS="4" ;;
    Void)               POS="5" ;;
    Alpine)             POS="6" ;;
    OpenSuse)           POS="7" ;;
    freebsd)            POS="8" ;;
  esac

  SEL()
  {
    for element in "$@"; do
      echo "$element"
    done | cut -d ':' -f $POS
  }

  if [ $OS = "FedoraIOT" ] || [ $OS = "fedora" ]; then
    [ -x "$(command -v rpm-ostree)" ] && $SUDO rpm-ostree override remove zezere-ignition ignition dbus-parsec
    $PKGINSTALL https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
    [ -x "$(command -v rpm-ostree)" ] && $SUDO rpm-ostree ex apply-live --allow-replacement
  fi

  if [ $OS = "rhel" ]; then
    $PKGINSTALL epel-release
    $PKGINSTALL --nogpgcheck https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$(rpm -E %rhel).noarch.rpm
    $SUDO dnf config-manager --set-enabled crb
    $SUDO dnf update -y
    $PKGINSTALL tar

    sh <(curl -L https://nixos.org/nix/install) --no-daemon
    sed -i 's/nixpkgs-unstable/nixos-22.05/g' .nix-channels
    . $HOME/.nix-profile/etc/profile.d/nix.sh

    nix-env -iA nixpkgs.stow
    nix-env -iA nixpkgs.android-tools
    nix-env -iA nixpkgs.ffmpegthumbnailer
    nix-env -iA nixpkgs.fzf
    nix-env -iA nixpkgs.scrot
    nix-env -iA nixpkgs.xdotool
    nix-env -iA nixpkgs.btrfs-progs
    nix-env -iA nixpkgs.dunst
    nix-env -iA nixpkgs.feh
    nix-env -iA nixpkgs.trash-cli
    nix-env -iA nixpkgs.zathura
    nix-env -iA nixpkgs.pandoc
    nix-env -iA nixpkgs.qutebrowser
    nix-env -iA nixpkgs.transmission-gtk

    nix-env -iA nixpkgs.light
    nix-env -iA nixpkgs.picom
    nix-env -iA nixpkgs.sox
    nix-env -iA nixpkgs.udiskie

    echo "max_parallel_downloads=10
    deltarpm=True
    defaultyes=True" | $SUDO tee -a /etc/dnf/dnf.conf
  fi

  $PKGINSTALL git $(SEL $STOW $FLATPAK $GRUBBY $PYTHON3PIP)
  [ -x "$(command -v rpm-ostree)" ] && $SUDO rpm-ostree ex apply-live --allow-replacement

  $PKGINSTALL ffmpeg firefox gcc groff i3lock keepassxc ncdu neovim mpv pipewire \
    rsync syncthing unzip usbutils w3m wireguard-tools xclip xdg-user-dirs zsh

  $PKGINSTALL $(SEL $ADBLOCK $ANDROIDTOOLS $BTRFSPROGS $CRONTABS $DBUSX11 $DUNST $FEH $FFMPEGTHUMBNAILER $FZF $GIFLIB $IMAGEMAGICK $LIBXFT $IMLIB2 \
    $LIBREOFFICE $LIBREOFFICEPT $LF $LIGHT $LIBEXIF $LIBX11 $LIBXINERAMA $LMSENSORS $NTFS3G $PANDOCPDF $PICOM $POPPLERUTILS $PULSEAUDIOUTILS \
    $PYTHON $PYTHON3SIX $QEMU $SCROT $SOX $TIG $TRASHCLI $TELEGRAM $UDISKIE $UEBERZUG $XDOTOOL $XINPUT $XF86VIDEOINTEL $XORGSERVER $XINIT $XRANDR \
    $XRDB $XSET $YOUTUBEDL $ZATHURA $ZATHURAPDF)

  if [ $RELEASE != freebsd ]; then
    $SUDO flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    [ -x "$(command -v rpm-ostree)" ] && $SUDO flatpak install org.signal.Signal -y || nix-env -iA nixpkgs.signal-desktop nixpkgs.telegram-desktop; flatpak install org.qutebrowser.qutebrowser -y
  fi
  }

  CONFIGURE_HOME()
  {
  [ -e .profile ] && rm .profile
  mkdir -p /home/$USERNAME/{Transferências,Documentos,Música,Imagens/Screenshots,Vídeos,.config,.cache/{lf,transmission}}
  mkdir -p /home/$USERNAME/.local/share/{backgrounds,gvfs-metadata,icc,keyrings,nvim,sounds,Trash,xorg}
  touch /home/$USERNAME/.local/recently-used.xbel
  git config --global user.name "$GIT_USERNAME"
  git config --global user.email "$GIT_EMAIL"
  echo "Cloning my dotfiles..."
  git clone https://github.com/sorathpanzer/dotgit.git /home/$USERNAME/.config/dotgit
  git config --global credential.helper store
  mkdir -p /home/$USERNAME/.cache/zsh
  touch /home/$USERNAME/.cache/zsh/history
  sh -c "cd /home/$USERNAME/.config/dotgit; stow -vt ~ dotfiles"


if [ $RELEASE != freebsd ]; then
  NVME=$(lsblk -l | grep sda | head -n 1 | awk '{print $1}')
  SDA=$(lsblk -l | grep sda | head -n 1 | awk '{print $1}')

  if [ ! -z $LVM_PASSWORD ]; then
    echo "Open vault password:"
    $SUDO mkdir /media/Vault
    echo -n "$LVM_PASSWORD" | $SUDO cryptsetup open --type luks /dev/sda1 Vault
    $SUDO mount /dev/mapper/Vault /media/Vault
    rsync -avrop /media/Vault/Documentos/BackHome/ /home/$USERNAME
    $SUDO cp $HOME/Documentos/wg0.conf /etc/wireguard
  fi
fi
  }

  CONFIGURE_SYSTEM()
  {
  if [ $OS = "FedoraIOT" ] || [ $OS = "fedora" ] || [ $OS = "rhel" ]; then
    pip install --user adblock
    pip install --user ueberzug
  fi

    grep -q config.bsd .config/suckless/dwm-6.3/Makefile && sed -i 's/config.bsd/config.mk/g' .config/suckless/dwm-6.3/Makefile
    grep -q config.bsd .config/suckless/dmenu-5.1/Makefile && sed -i 's/config.bsd/config.mk/g' .config/suckless/dmenu-5.1/Makefile
    grep -q config.bsd .config/suckless/st-0.8.5/Makefile && sed -i 's/config.bsd/config.mk/g' .config/suckless/st-0.8.5/Makefile
    grep -q config.nixos .config/suckless/dwm-6.3/Makefile && sed -i 's/config.nixos/config.mk/g' .config/suckless/dwm-6.3/Makefile
    grep -q config.nixos .config/suckless/dmenu-5.1/Makefile && sed -i 's/config.nixos/config.mk/g' .config/suckless/dmenu-5.1/Makefile
    grep -q config.nixos .config/suckless/st-0.8.5/Makefile && sed -i 's/config.nixos/config.mk/g' .config/suckless/st-0.8.5/Makefile

    $SUDO mkdir -p /etc/polkit-1/rules.d/

    echo "vm.swappiness=10" | $SUDO tee -a /etc/sysctl.d/99-sysctl.conf
    echo "blacklist ideapad_laptop" | $SUDO tee /etc/modprobe.d/blacklist.conf

    echo '/* Allow members of the wheel group to execute any actions
    * without password authentication, similar to "$SUDO NOPASSWD:"
    */
    polkit.addRule(function(action, subject) {
    if (subject.isInGroup("wheel")) {
      return polkit.Result.YES;
    }
  });' | $SUDO tee /etc/polkit-1/rules.d/49-nopasswd_global.rules

  echo 'polkit.addRule(function(action, subject) {
  if ((action.id == "org.freedesktop.udisks2.filesystem-mount-system" ||
    action.id == "org.freedesktop.udisks.filesystem-mount-system-internal") &&
    subject.local && subject.active && subject.isInGroup("wheel"))
    {
      return polkit.Result.YES;
    }
  });' | $SUDO tee /etc/polkit-1/rules.d/allow-mount-internal.rules

  $SUDO mkdir -p /media
  echo '# UDISKS_FILESYSTEM_SHARED
  # ==1: mount filesystem to a shared directory (/media/VolumeName)
  # ==0: mount filesystem to a private directory (/run/media/$USER/VolumeName)
  # See udisks(8)
  ENV{ID_FS_USAGE}=="filesystem|other|crypto", ENV{UDISKS_FILESYSTEM_SHARED}="1"' | $SUDO tee /etc/udev/rules.d/99-udisks2.rules

  echo "[Unit]
  Description=Lock X session using slock for user %i
  Before=sleep.target
  [Service]
  User=%i
  Type=forking
  Environment=DISPLAY=:0
  ExecStartPre=/usr/bin/xset dpms force suspend
  ExecStart=/usr/bin/i3lock -c 000000
  [Install]
  WantedBy=sleep.target" | $SUDO tee /etc/systemd/system/suspend@.service

  echo 'Section "InputClass"
  Identifier "libinput touchpad catchall"
  MatchIsTouchpad "on"
  MatchDevicePath "/dev/input/event*"
  Driver "libinput"
  Option "NaturalScrolling" "true"
  EndSection' | $SUDO tee /etc/X11/xorg.conf.d/40-libinput.conf

  echo 'Section "Device"
  Identifier "Intel Graphics"
  Driver "intel"
  Option "TearFree" "true"
  Option "DRI" "False"
  EndSection' | $SUDO tee /etc/X11/xorg.conf.d/20-intel.conf

  echo 'ATTR{idVendor}=="2717", ATTR{idProduct}=="4ee7", SYMLINK+="libmtp-%k", ENV{ID_MTP_DEVICE}="1", ENV{ID_MEDIA_PLAYER}="1"
  SUBSYSTEMS=="usb", ATTRS{idVendor}=="2717", MODE="0640", OWNER="sorath"' | $SUDO tee /etc/udev/rules.d/50-android.rules

  if [ $OS != "FedoraIOT" ] && [ $OS != "fedora" ] && [ $OS != "rhel" ]; then
    $SUDO usermod -a -G plugdev $USER
  fi

  $SUDO usermod -s /usr/bin/zsh $USER

  $SUDO mkdir -p /etc/systemd/system/getty@tty1.service.d/

  $SUDO touch /etc/systemd/system/getty@tty1.service.d/override.conf
  echo '[Service]
  ExecStart=
  ExecStart=-/usr/sbin/agetty --autologin sorath --noclear %I $TERM' | $SUDO tee /etc/systemd/system/getty@tty1.service.d/override.conf

  $SUDO touch /etc/sudoers.d/$USERNAME
  echo "$USERNAME ALL=(ALL) NOPASSWD: /usr/bin/wg-quick,/usr/bin/wg,/usr/bin/ostree,/usr/sbin/reboot,/usr/sbin/poweroff,/usr/bin/setleds" | $SUDO tee /etc/sudoers.d/sorath

  echo "$USERNAME" | $SUDO tee -a /etc/shutdown.allow

  $SUDO grubby --update-kernel=ALL --args=quiet
  }


  if [ $RELEASE != nixos ]; then
    CONFIGURE_PACKAGES
  fi

  CONFIGURE_HOME

  if [ $RELEASE = freebsd ]; then
    doas pkg install -y ncurses dsbmd fusefs-lkl
    doas sysrc dbus_enable=YES
    doas sysrc openntpd_enable=YES
    doas sysrc hald_enable=YES
    doas sysrc moused_enable=YES
    #doas sysrc linux_enable=YES
    echo "kern.evdev.rcpt_mask=3" | doas tee -a /etc/sysctl.conf
    grep -q config.mk .config/suckless/dwm-6.3/Makefile && sed -i '' s/config.mk/config.bsd/g .config/suckless/dwm-6.3/Makefile
    grep -q config.mk .config/suckless/dmenu-5.1/Makefile && sed -i '' s/config.mk/config.bsd/g .config/suckless/dmenu-5.1/Makefile
    grep -q config.mk .config/suckless/st-0.8.5/Makefile && sed -i '' s/config.mk/config.bsd/g .config/suckless/st-0.8.5/Makefile
    grep -q config.nixos .config/suckless/dwm-6.3/Makefile && sed -i '' s/config.nixos/config.bsd/g .config/suckless/dwm-6.3/Makefile
    grep -q config.nixos .config/suckless/dmenu-5.1/Makefile && sed -i '' s/config.nixos/config.bsd/g .config/suckless/dmenu-5.1/Makefile
    grep -q config.nixos .config/suckless/st-0.8.5/Makefile && sed -i '' s/config.nixos/config.bsd/g .config/suckless/st-0.8.5/Makefile
    cd $HOME/.config/suckless/dwm-6.3; doas make clean install
    cd $HOME/.config/suckless/dmenu-5.1; doas make clean install
    cd $HOME/.config/suckless/st-0.8.5; doas make clean install
    cd $HOME/.config/suckless/dwmblocks; doas make clean install
    cd $HOME/.config/suckless/sxiv; doas make clean install
    cd $HOME
  fi

  if [ $RELEASE = nixos ]; then
    mkdir .config
    curl -L https://raw.githubusercontent.com/sorathpanzer/nixos/main/configuration.nix > configuration.nix
    sed -i s/luks-/$(lsblk -l | grep luks | awk '{print $1}')/g configuration.nix
    sudo mv configuration.nix /etc/nixos
    grep -q config.nixos .config/suckless/dwm-6.3/Makefile || sed -i 's/config.*/config.nixos/g' .config/suckless/dwm-6.3/Makefile
    grep -q config.nixos .config/suckless/dmenu-5.1/Makefile || sed -i 's/config.*/config.nixos/g' .config/suckless/dmenu-5.1/Makefile
    grep -q config.nixos .config/suckless/st-0.8.5/Makefile || sed -i 's/config.*/config.nixos/g' .config/suckless/st-0.8.5/Makefile
    sudo nixos-rebuild boot
  fi

  if [ $RELEASE != nixos ] &&  [ $RELEASE != freebsd ]; then
    CONFIGURE_SYSTEM
  fi

  cat install.error | grep error
